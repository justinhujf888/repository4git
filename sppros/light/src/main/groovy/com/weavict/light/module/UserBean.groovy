package com.weavict.light.moduleimport com.weavict.common.security.md5.MD5Stringimport com.weavict.common.util.MathUtilimport com.weavict.light.entity.*import org.springframework.stereotype.Serviceimport org.springframework.transaction.annotation.Transactional@Service("userBean")class UserBean extends ModuleBean{	String buildPasswordCode(String spwd)	{		return MD5String.get(spwd)[6..28];	}	@Transactional	void registBuyer(Buyer buyer)	{		if (buyer.createDate==null)		{			buyer.createDate = new Date();		}		BuyerAppInfo buyerAppInfo = new BuyerAppInfo();		buyerAppInfo.buyerAppInfoPK = new BuyerAppInfoPK(buyer.tempMap["appId"],buyer.phone);		buyerAppInfo.loginName = buyer.loginName;		buyerAppInfo.password = buyer.password;		this.updateObject(buyer);		this.updateObject(buyerAppInfo);	}	@Transactional	void ressetBuyerPassword(String appId,String phone,String password)	{		this.executeEQL("update BuyerAppInfo set password = :password where buyerAppInfoPK.buyerId = :phone and buyerAppInfoPK.appId = :appId",["appId":appId,"phone":phone,"password":password]);	}	List queryOrgrationList8Buyer(String buyerId)	{//		return this.queryObject("select o from Orgration as o join BuyerOrgration as bo on o.id = bo.buyerOrgrationPK.orgrationId where bo.buyerOrgrationPK.buyerId = :buyerId",["buyerId":buyerId]);//		return this.queryObject("select b.orgrationList from Buyer as b join fetch b.orgrationList where b.phone = :buyerId",["buyerId":buyerId]);		return this.createNativeQuery("select bo.buyer_id as buyerid,bai.wxnickname,bai.headimgurl,bo.status,bo.ismanager,bo.iscreater,o.id,o.name,o.tel,o.area,o.address,o.description,o.mimage,to_char(o.createdate,'yyyy-MM-dd hh24:mi:ss') as createdate,o.buydesc,o.managedesc,to_char(bo.createdate,'yyyy-MM-dd hh24:mi:ss') as bcreatedate,bo.description as boDesc from orgration_buyer as bo left join orgration as o on o.id = bo.orgration_id left join buyerappinfo bai on bai.buyerid = bo.buyer_id where bo.buyer_id = '${buyerId}'").getResultList();	}	List queryBuyers8Orgration(String orgId,byte status)	{		StringBuffer sbf = new StringBuffer();		sbf << "select b.name,ob.niname,ob.headimg,ob.status,b.phone,b.tel,b.area,b.address,b.description,b.createdate,ob.ismanager,ob.iscreater,ob.orgration_id from buyer as b left join orgration_buyer as ob on b.phone = ob.buyer_id where 1=1";		sbf << " and ob.orgration_id = '${orgId}'";		if (status > (-1 as byte))		{			sbf << " and ob.status = '${status}'";		}		return this.createNativeQuery(sbf.toString()).getResultList();	}	Buyer queryTheBuyer8WxUniId(String unionId)	{		this.queryObject("select b from Buyer b where b.wxopenid = :unionId",["unionId":unionId])?.get(0);	}	Buyer queryTheBuyer8WxId(String wxId)	{		this.queryObject("select b from Buyer b where b.wxid = :wxid",["wxid":wxId])?.get(0);	}	PageUtil queryBuyers8Orgration(String orgId,byte status,int page, int size)	{		StringBuffer sbf = new StringBuffer();		sbf << " and ob.orgration_id = '${orgId}'";		if (status > (-1 as byte))		{			sbf << " and ob.status = '${status}'";		}		PageUtil pageUtil = new PageUtil(size, page, (this.em.createNativeQuery("select count(*) from buyer as b left join orgration_buyer as ob on b.phone = ob.buyer_id where 1=1" + sbf.toString()).getResultList().get(0) as int));		List ol = this.createNativeQuery("select b.name,ob.niname,ob.headimg,ob.status,b.phone,b.tel,b.area,b.address,b.description,b.createdate,ob.ismanager,ob.iscreater,ob.orgration_id from buyer as b left join orgration_buyer as ob on b.phone = ob.buyer_id where 1=1" + sbf.toString() + " limit ${size} offset ${page*size}").getResultList();		pageUtil.numberOfElements = ol.size();		pageUtil.content = ol;		return pageUtil;	}	String phoneCode()	{		return "" + ((Math.random()) * 899999.0D + 100000.0D).toInteger();	}	String buildPasswordStr(v)	{		return v[6..28];	}}