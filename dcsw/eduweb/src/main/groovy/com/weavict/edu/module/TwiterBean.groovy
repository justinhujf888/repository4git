package com.weavict.edu.moduleimport com.aliyun.oss.OSSClientimport com.weavict.common.util.MathUtilimport com.weavict.edu.entity.Twiterimport com.weavict.edu.entity.TwiterDetailsimport com.weavict.edu.entity.TwiterImagesimport com.weavict.edu.entity.TwiterZanimport com.weavict.website.common.OtherUtilsimport org.springframework.stereotype.Serviceimport org.springframework.transaction.annotation.Transactional@Service("twiterBean")class TwiterBean extends ModuleBean{    PageUtil queryTwiterList(String orgrationId,int currentPage,int pageSize)    {        PageUtil pageUtil = this.queryRecordsForPager(                "select tw from Twiter tw where tw.twiterType<>11 and tw.buyerOrgration.buyerOrgrationPK.orgrationId = :orgrationId order by tw.createDate desc",                "select count(tw) from Twiter tw where tw.twiterType<>11 and tw.buyerOrgration.buyerOrgrationPK.orgrationId = :orgrationId",                ["orgrationId":orgrationId],                currentPage,pageSize        );        pageUtil?.content?.each {            it.cancelLazyEr();            it.twiterImagesList = this.queryImages8Twiter(it.id)?.each {m->                m.cancelLazyEr();            };        };        return pageUtil;    }    List<TwiterImages> queryImages8Twiter(String twiterId)    {        return this.queryObject("select imgs from TwiterImages as imgs where imgs.twiter.id = :twiterId order by imgs.listNum", ["twiterId":twiterId]);    }    List<TwiterZan> queryTwiterZanList(String twiterId)    {        return this.queryObject("select tz from TwiterZan as tz where tz.twiter.id = :twiterId",["twiterId":twiterId]);    }    @Transactional    Twiter updateTwiter(Twiter t)    {        if (t.id in [null,""])        {            t.id = MathUtil.getPNewId();            t.createDate = new Date();        }        List<TwiterImages> twiterImagesList = t.twiterImagesList;        t.twiterImagesList = null;        this.updateObject(t);        if (twiterImagesList!=null && twiterImagesList.size()>0)        {            t.twiterImagesList = new ArrayList();            twiterImagesList.eachWithIndex {tImg,index->                if(tImg.id in [null,""])                {                    tImg.id = MathUtil.getPNewId();                }                tImg.listNum = index;                tImg.twiter = new Twiter();                tImg.twiter.id = t.id;                t.twiterImagesList << this.updateObject(tImg);            }        }        return t;    }    @Transactional    void delTwite(String twiterId,byte twiterType)    {        //oss        if (twiterType != 2 as byte)        {            OSSClient ossClient = OtherUtils.genOSSClient();            this.queryImages8Twiter(twiterId).each {twImg->                if (!(twImg.thumbPath in [null,""]))                {                    ossClient.deleteObject(OtherUtils.givePropsValue("ali_oss_bucketName"), twImg.thumbPath);                }                ossClient.deleteObject(OtherUtils.givePropsValue("ali_oss_bucketName"), twImg.path);            }            ossClient.shutdown();        }        //oss end        this.executeEQL("delete TwiterImages where twiter.id=:twiterId", ["twiterId":twiterId]);        this.executeEQL("delete TwiterDetails where twiter.id=:twiterId", ["twiterId":twiterId]);        this.executeEQL("delete TwiterZan where twiter.id=:twiterId", ["twiterId":twiterId]);        this.executeEQL("delete Twiter where id=:id", ["id":twiterId]);//      评论没有启用图片，所以不执行评论的图片删除//        this.queryTwiterDetailsList(twiterId,0,5000).each {td->//            this.executeEQL("delete TwiterDetailsImages where twiterDetails.id=:tdId", ["tdId":td.id]);//        }    }    @Transactional    void delTwiterDetail(String twiterDetailId)    {        this.executeEQL("delete TwiterDetails where id=:id",["id":twiterDetailId]);    }    @Transactional    void delTwiteImages(String imageId)    {        this.executeEQL("delete TwiterImages where id=:id", ["id":imageId]);    }    @Transactional    void updateTwiterImgsSetup(List twiterImgList)    {        if (twiterImgList!=null && twiterImgList.size()>0)        {            twiterImgList.eachWithIndex({m,index ->                this.executeEQL("update TwiterImages set listNum = :listNum where id = :id",["id":m.id,"listNum":index]);            });        }    }    PageUtil queryTwiterDetailsList(String twiterId,int currentPage,int pageSize)    {        PageUtil pageUtil = this.queryRecordsForPager(                "select twd from TwiterDetails as twd where twd.twiter.id = :twiterId order by twd.createDate",                "select count(twd) from TwiterDetails as twd where twd.twiter.id = :twiterId",                ["twiterId":twiterId],                currentPage,pageSize        );        pageUtil?.content?.each {            it.cancelLazyEr();        };        return pageUtil;    }    @Transactional    TwiterDetails updateTwiterDetails(TwiterDetails td)    {        if (td.id in [null,""])        {            td.id = MathUtil.getPNewId();            td.createDate = new Date();            td.modifyDate = td.createDate;        }        this.addObject(td);        this.createNativeQuery4Params("update twiter set twiterdetailcount = twiterdetailcount + 1 where id = :id",["id":td.twiter.id]).executeUpdate();        td.cancelLazyEr();        return td;    }    @Transactional    void delTwiteDetailsImages(String imageId)    {        this.executeEQL("delete TwiterDetailsImages where id=:id", ["id":imageId]);    }    @Transactional    void updateTwiterDetailsImgsSetup(List twiterDetailsImgList)    {        if (twiterDetailsImgList!=null && twiterDetailsImgList.size()>0)        {            twiterDetailsImgList.eachWithIndex({m,index ->                this.executeEQL("update TwiterDetailsImages set listNum = :listNum where id = :id",["id":m.id,"listNum":index]);            });        }    }}