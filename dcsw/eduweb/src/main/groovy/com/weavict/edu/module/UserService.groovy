package com.weavict.edu.moduleimport cn.hutool.core.date.DateFieldimport com.weavict.edu.entity.Bookimport com.weavict.edu.entity.Buyerimport com.weavict.edu.entity.BuyerBookimport com.weavict.edu.entity.BuyerBookPKimport com.weavict.edu.entity.BuyerStudyimport com.weavict.edu.entity.BuyerStudyPKimport com.weavict.edu.entity.BuyerStudyPlanimport com.weavict.edu.entity.BuyerStudyPlanPKimport com.weavict.common.security.md5.MD5Stringimport org.springframework.stereotype.Serviceimport org.springframework.transaction.annotation.Transactional@Service("userService")class UserService extends ModuleBean{	String buildPasswordCode(String spwd)	{		return MD5String.get(spwd)[6..28];	}	@Transactional	void delThePrivaterImage(String imgId)	{		this.executeEQL("delete ProductsPrivaterImages where id = :id",["id":imgId]);	}	@Transactional	void updateTheBrandLogo(String id,String logo)	{		this.executeEQL("update Brand set logo = :logo where id = :id",["id":id,"logo":logo]);	}	@Transactional	void registBuyer(Buyer buyer)	{		if (buyer.createDate==null)		{			buyer.createDate = new Date();		}		this.updateObject(buyer);	}	@Transactional	void ressetBuyerPassword(String phone,String password)	{		this.executeEQL("update Buyer set password = :password where phone = :phone",["phone":phone,"password":password]);	}	Buyer queryTheBuyer8WxUniId(String unionId)	{		this.queryObject("select b from Buyer b where b.wxopenid = :unionId",["unionId":unionId])?.get(0);	}	Buyer queryTheBuyer8WxId(String wxId)	{		this.queryObject("select b from Buyer b where b.wxid = :wxid",["wxid":wxId])?.get(0);	}	List<BuyerStudy> queryBuyerStudy8Book4Buyer(String buyerId,String bookId)	{		List<BuyerStudy> buyerStudyList = new ArrayList();		this.createNativeQuery4Params("select bs.buyerid,bs.bookid,bs.bookuniid,bs.type,bs.createdate,bs.dataurl,bs.errorcount,bs.rightcount,bs.totalcount,bs.unfamiliarcount,bu.name,bu.imgurl,bu.isbuy,bo.booktype from buyerstudy bs left join bookuni bu on bs.bookuniid = bu.id left join book bo on bo.id = bs.bookid where bs.buyerid = :buyerId and bs.bookid = :bookId",["buyerId":buyerId,"bookId":bookId]).getResultList()?.each {			BuyerStudy buyerStudy = new BuyerStudy();			buyerStudy.buyerStudyPK = new BuyerStudyPK();			buyerStudy.buyerStudyPK.buyerId = it[0];			buyerStudy.buyerStudyPK.bookId = it[1];			buyerStudy.buyerStudyPK.bookUniId = it[2];			buyerStudy.buyerStudyPK.type = it[3];			buyerStudy.createDate = it[4];			buyerStudy.dataUrl = it[5];			buyerStudy.errorCount = it[6];			buyerStudy.rightCount = it[7];			buyerStudy.totalCount = it[8];			buyerStudy.unfamiliarCount = it[9];			buyerStudy.tempMap = [:];			buyerStudy.tempMap["bookUniName"] = it[10];			buyerStudy.tempMap["bookUniImgUrl"] = it[11];			buyerStudy.tempMap["isBuy"] = it[12];			buyerStudy.tempMap["bookType"] = it[13];			buyerStudyList << buyerStudy;		}		return buyerStudyList;	}	List<BuyerStudyPlan> queryBuyerStudyPlanList(String buyerId)	{		List<BuyerStudyPlan> buyerStudyPlanList = new ArrayList();		this.createNativeQuery4Params("""select * from (select distinct bp.buyerid,bp.bookid,bp.begindate,bp.enddate,bp.createdate,b.name,b.bookcate,b.booksubcate,b.imgurl,b.zxid,b.price,b.tuanprice,'plan',b.booktype from buyerstudyplan bp left join book b on bp.bookid = b.id where bp.buyerid = :buyerIdunionselect distinct bs.buyerid,bs.bookid,current_date,current_date,current_date,b.name,b.bookcate,b.booksubcate,b.imgurl,b.zxid,b.price,b.tuanprice,'study',b.booktype from buyerstudy bs left join book b on bs.bookid = b.id where bs.buyerid = :buyerId) as sdtable order by bookid""",["buyerId":buyerId]).getResultList()?.each {			BuyerStudyPlan buyerStudyPlan = new BuyerStudyPlan();			buyerStudyPlan.buyerStudyPlanPK = new BuyerStudyPlanPK();			buyerStudyPlan.buyerStudyPlanPK.buyerId = it[0];			buyerStudyPlan.buyerStudyPlanPK.bookId = it[1];			buyerStudyPlan.beginDate = it[2];			buyerStudyPlan.endDate = it[3];			buyerStudyPlan.createDate = it[4];			buyerStudyPlan.tempMap = [:];			buyerStudyPlan.tempMap["bookName"] = it[5];			buyerStudyPlan.tempMap["bookCate"] = it[6];			buyerStudyPlan.tempMap["bookSubCate"] = it[7];			buyerStudyPlan.tempMap["imgUrl"] = it[8];			buyerStudyPlan.tempMap["zxId"] = it[9];			buyerStudyPlan.tempMap["price"] = it[10];			buyerStudyPlan.tempMap["tuanPrice"] = it[11];			buyerStudyPlan.tempMap["rowType"] = it[12];			buyerStudyPlan.tempMap["bookType"] = it[13];			buyerStudyPlanList << buyerStudyPlan;		}		return buyerStudyPlanList;	}	@Transactional	void addBuyerBookList2Buyer(String buyerId,List<Book> bookList)	{		bookList?.each {			BuyerBook buyerBook = new BuyerBook();			buyerBook.buyerBookPK = new BuyerBookPK(it.id,buyerId);			buyerBook.beginDate = new Date();			buyerBook.endDate = cn.hutool.core.date.DateUtil.offset(buyerBook.beginDate, DateField.YEAR,1);			this.updateObject(buyerBook);		}	}	@Transactional	void delTheBuyerStudyPlan(String buyerId,String bookId)	{		this.executeEQL("delete BuyerStudyPlan where buyerStudyPlanPK.buyerId = :buyerId and buyerStudyPlanPK.bookId = :bookId",["buyerId":buyerId,"bookId":bookId]);	}	String phoneCode()	{		return "" + ((Math.random()) * 899999.0D + 100000.0D).toInteger();	}	String buildPasswordStr(v)	{		return v[6..28];	}}