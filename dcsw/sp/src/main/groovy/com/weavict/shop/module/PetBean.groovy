package com.weavict.shop.moduleimport com.aliyun.oss.OSSClientimport com.weavict.common.util.DateUtilimport com.weavict.common.util.MathUtilimport com.weavict.shop.entity.Petsimport com.weavict.shop.entity.PetsMedicalimport com.weavict.shop.entity.PetsMedicalImagesimport com.weavict.website.common.OtherUtilsimport org.springframework.stereotype.Serviceimport org.springframework.transaction.annotation.Transactional@Service("petBean")class PetBean extends ModuleBean{    List<Pets> queryPetsList8Buyer(String phone)    {        this.queryObject("select p from Pets p where p.buyer.phone = :phone",["phone":phone]);    }    List<PetsMedical> queryPetsMedicalList8Pet(String petId)    {        this.queryObject("select pm from PetsMedical pm where pm.pets.id = :petId",["petId":petId]);    }    List<PetsMedicalImages> queryPetsMedicalImagesList(String petsMedicalId)    {        return this.queryObject("select imgs from PetsMedicalImages as imgs where imgs.petsMedical.id = :petsMedicalId", ["petsMedicalId":petsMedicalId]);    }    Map queryPetTypes(String bType)    {        def map = [:];        def laz = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];        map["types"] = new ArrayList();        [["id":0,"name":"汪星人"],["id":1,"name":"喵星人"]].each {t->            map["types"] << ["typeId":t,"typeName":t.name,"typeItems":({                def tmap = [:];                this.queryObject("select p from PetType p where p.bigType = :bigType order by p.firstChar",["bigType": t.id as byte]).each { p ->                    p.cancelLazyEr();                    if (tmap[p.firstChar.toUpperCase()]==null)                    {                        tmap[p.firstChar.toUpperCase()] = new ArrayList();                    }                    tmap[p.firstChar.toUpperCase()] << p;                }                def zmap = new ArrayList();;                laz.each {zm->                    zmap << ["zm":zm,"items":tmap[zm]];                }                return zmap;            }).call()];        }        return map;    }    @Transactional    void deleteThePetsMedicalImages(String imageId)    {        PetsMedicalImages petsMedicalImages = this.findObjectById(PetsMedicalImages.class,imageId);        //oss        OSSClient ossClient = OtherUtils.genOSSClient();        ossClient.deleteObject(OtherUtils.givePropsValue("ali_oss_bucketName"), petsMedicalImages.path);        ossClient.shutdown();        //oss end        this.executeEQL("delete PetsMedicalImages where id=:id", ["id":imageId]);    }    @Transactional    PetsMedical updatePetsMedical(PetsMedical petsMedical)    {        List imgList = petsMedical.petsMedicalImagesList;        petsMedical.petsMedicalImagesList = null;        if (petsMedical.id in [null, ""])        {            petsMedical.id = MathUtil.getPNewId();        }        petsMedical = this.updateObject(petsMedical);        imgList?.each {img->            img.id = MathUtil.getPNewId();            img.petsMedical.id = petsMedical.id;            this.updateObject(img);        }        return petsMedical;    }    PageUtil queryTwiterList4Pets(String petsId,int currentPage,int pageSize)    {        return this.createNativeQueryLimit4Params("select t.id,t.title,t.description,t.twitertype,t.createdate,t.buyerorgration_orgration_id from petstwiter pt left join twiter t on t.id = pt.twiterid where pt.petid = :petsId",                "select count(*) from petstwiter pt left join twiter t on t.id = pt.twiterid where pt.petid = :petsId",                ["petsId":petsId],currentPage,pageSize);    }    @Transactional    void deletePetsTwiter(String twiterId)    {        this.executeEQL("delete PetsTwiter where petsTwiterPK.twiterId = :twiterId",["twiterId":twiterId]);    }    @Transactional    void editTwiterType(String twiterId,byte twiterType)    {        this.executeEQL("update Twiter set twiterType = :twiterType where id = :twiterId",["twiterId":twiterId,"twiterType":twiterType]);    }    PageUtil queryPetsGPS4Map(Map pm,int currentPage,int pageSize)    {        return this.createNativeQueryLimit("select p.id,p.name,p.status,p.pettype_id pettypeId,pt.name ptName,pt.bigtype,p.headImgPath,p.sex,p.buyer_phone buyerId,ob.orgration_id orgId,ob.area,ob.address,ob.latitude,ob.longitude from pets p left join orgration_buyer ob on ob.buyer_id = p.buyer_phone left join pettype pt on pt.id = p.pettype_id",                "select count(p.id) from pets p left join orgration_buyer ob on ob.buyer_id = p.buyer_phone left join pettype pt on pt.id = p.pettype_id",                currentPage,pageSize);    }    int queryPetsRecordInfoCurrentDay(String petsId,byte mediaType,Date date)    {        return this.createNativeQuery4Params("select count(ti.id) from twiterimages ti left join twiter t on t.id = ti.twiter_id left join petstwiter pt on pt.twiterid = ti.twiter_id where pt.petid = :petId and ti.mediatype = :mediaType and to_char(t.createdate,'YYYY-MM-DD') = :createDate",["petId":petsId,"mediaType":mediaType,"createDate": DateUtil.format(date,"yyyy-MM-dd")]).getSingleResult();    }}