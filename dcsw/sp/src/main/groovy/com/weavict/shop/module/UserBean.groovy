package com.weavict.shop.moduleimport com.weavict.common.security.md5.MD5Stringimport com.weavict.common.util.MathUtilimport com.weavict.shop.entity.*import org.springframework.stereotype.Serviceimport org.springframework.transaction.annotation.Transactional@Service("userBean")class UserBean extends ModuleBean{	String buildPasswordCode(String spwd)	{		return MD5String.get(spwd)[6..28];	}	ProductsPrivater checkProductsPrivaterLogin(String loginName,String password)	{		return this.queryObject("select p from ProductsPrivater as p where p.loginName = :loginName and p.password = :password",["loginName":loginName,"password":buildPasswordCode(password)])?.get(0);	}	List<ProductsPrivater> privaterList4User(String userId)	{		return this.queryObject("select p from ProductsPrivater p where p.privaterId = :privaterId order by p.createDate",["privaterId":userId]);	}	@Transactional	ProductsPrivater registerTheProductsPrivater(ProductsPrivater pp)	{		pp.createDate = new Date();//		pp.password = buildPasswordCode(pp.password);		return this.updateObject(pp);	}	@Transactional	ProductsPrivaterImages addProductsPrivaterImages(ProductsPrivaterImages ppi)	{		return this.updateObject(ppi);	}	List<ProductsPrivaterImages> queryPrivaterImages(String privaterId)	{		return this.queryObject("select ppi from ProductsPrivaterImages as ppi where ppi.productsPrivater.id = :privaterId",["privaterId":privaterId]);	}	@Transactional	void delThePrivaterImage(String imgId)	{		this.executeEQL("delete ProductsPrivaterImages where id = :id",["id":imgId]);	}	@Transactional	void addUser2Shop(UserShop userShop)	{		this.updateObject(userShop);	}	List<Buyer> queryUsers8TheShop(String shopId,String userId,byte status)	{		StringBuffer sbf = new StringBuffer();		Map<String, Object> paramsMap = new HashMap<String, Object>();		sbf << "select u.phone,u.name,us.zhiwei,u.description,u.headimgurl,us.status,us.rulestatus,us.shidaili,us.name usname from usershop us left join buyer u on us.user_id = u.phone where us.shop_id = :shopId";		paramsMap["shopId"] = shopId;		if (!(userId in [null,""]))		{			sbf << " and u.phone = :userId";			paramsMap["userId"] = userId;		}		if (status > (-1 as byte))		{			if (status == 0 as byte)			{				sbf << " and (us.status = 0 or us.status = 2)";			}			else			{				sbf << " and us.status = :status";				paramsMap["status"] = status;			}		}		List<Buyer> userList = new ArrayList();		this.createNativeQuery4Params(sbf.toString(),paramsMap).getResultList()?.each {u->			Buyer buyer = new Buyer();			buyer.phone = u[0];			buyer.name = u[1];			buyer.description = u[3];			buyer.headImgUrl = u[4];			buyer.tempMap = [:];			buyer.tempMap["zhiWei"] = u[2];			buyer.tempMap["usStatus"] = u[5];			buyer.tempMap["usRuleStatus"] = u[6];			buyer.tempMap["shiDaiLi"] = u[7];			buyer.tempMap["userShopName"] = u[8];			userList << buyer;		};		return userList;	}	List queryShops8TheUser(String userId)	{		return this.createNativeQuery4Params("""select s.id,s.name,s.area,s.address,s.createdate,s.description,s.privatertype,s.phone,s.orgrationid,0 as status,s.tel,us.status as usstatus,us.rulestatus from usershop us left join productsprivater s on us.shop_id = s.id where us.status != 1 and us.user_id = :userIdunionselect s.id,s.name,s.area,s.address,s.createdate,s.description,s.privatertype,s.phone,s.orgrationid,0 as status,s.tel,2 as usstatus,2 as rulestatus from productsprivater s where s.privaterid = :userId""",["userId":userId]).getResultList();	}	@Transactional	Brand updateTheBrand(Brand brand)	{		if (brand.id in [null,""])		{			brand.id = MathUtil.getPNewId();			brand.createDate = new Date();		}		brand.modifyDate = brand.createDate;		return this.updateObject(brand);	}	@Transactional	void updateTheBrandLogo(String id,String logo)	{		this.executeEQL("update Brand set logo = :logo where id = :id",["id":id,"logo":logo]);	}	List<Brand> queryBrands4Privater(String privaterId)	{		return this.queryObject("select b from Brand as b where b.productsPrivater.id = :privaterId",["privaterId":privaterId]);	}	@Transactional	void registBuyer(Buyer buyer)	{		if (buyer.createDate==null)		{			buyer.createDate = new Date();		}		BuyerAppInfo buyerAppInfo = new BuyerAppInfo();		buyerAppInfo.buyerAppInfoPK = new BuyerAppInfoPK(buyer.tempMap["appId"],buyer.phone);		buyerAppInfo.loginName = buyer.loginName;		buyerAppInfo.password = buyer.password;		this.updateObject(buyer);		this.updateObject(buyerAppInfo);	}	@Transactional	void ressetBuyerPassword(String appId,String phone,String password)	{		this.executeEQL("update BuyerAppInfo set password = :password where buyerAppInfoPK.buyerId = :phone and buyerAppInfoPK.appId = :appId",["appId":appId,"phone":phone,"password":password]);	}	List queryOrgrationList8Buyer(String buyerId)	{//		return this.queryObject("select o from Orgration as o join BuyerOrgration as bo on o.id = bo.buyerOrgrationPK.orgrationId where bo.buyerOrgrationPK.buyerId = :buyerId",["buyerId":buyerId]);//		return this.queryObject("select b.orgrationList from Buyer as b join fetch b.orgrationList where b.phone = :buyerId",["buyerId":buyerId]);		return this.createNativeQuery("select bo.buyer_id as buyerid,bai.wxnickname,bai.headimgurl,bo.status,bo.ismanager,bo.iscreater,o.id,o.name,o.tel,o.area,o.address,o.description,o.mimage,to_char(o.createdate,'yyyy-MM-dd hh24:mi:ss') as createdate,o.buydesc,o.managedesc,to_char(bo.createdate,'yyyy-MM-dd hh24:mi:ss') as bcreatedate,bo.description as boDesc from orgration_buyer as bo left join orgration as o on o.id = bo.orgration_id left join buyerappinfo bai on bai.buyerid = bo.buyer_id where bo.buyer_id = '${buyerId}'").getResultList();	}	List queryBuyers8Orgration(String orgId,byte status)	{		StringBuffer sbf = new StringBuffer();		sbf << "select b.name,ob.niname,ob.headimg,ob.status,b.phone,b.tel,b.area,b.address,b.description,b.createdate,ob.ismanager,ob.iscreater,ob.orgration_id from buyer as b left join orgration_buyer as ob on b.phone = ob.buyer_id where 1=1";		sbf << " and ob.orgration_id = '${orgId}'";		if (status > (-1 as byte))		{			sbf << " and ob.status = '${status}'";		}		return this.createNativeQuery(sbf.toString()).getResultList();	}	Buyer queryTheBuyer8WxUniId(String unionId)	{		this.queryObject("select b from Buyer b where b.wxopenid = :unionId",["unionId":unionId])?.get(0);	}	Buyer queryTheBuyer8WxId(String wxId)	{		this.queryObject("select b from Buyer b where b.wxid = :wxid",["wxid":wxId])?.get(0);	}	PageUtil queryBuyers8Orgration(String orgId,byte status,int page, int size)	{		StringBuffer sbf = new StringBuffer();		sbf << " and ob.orgration_id = '${orgId}'";		if (status > (-1 as byte))		{			sbf << " and ob.status = '${status}'";		}		PageUtil pageUtil = new PageUtil(size, page, (this.em.createNativeQuery("select count(*) from buyer as b left join orgration_buyer as ob on b.phone = ob.buyer_id where 1=1" + sbf.toString()).getResultList().get(0) as int));		List ol = this.createNativeQuery("select b.name,ob.niname,ob.headimg,ob.status,b.phone,b.tel,b.area,b.address,b.description,b.createdate,ob.ismanager,ob.iscreater,ob.orgration_id from buyer as b left join orgration_buyer as ob on b.phone = ob.buyer_id where 1=1" + sbf.toString() + " limit ${size} offset ${page*size}").getResultList();		pageUtil.numberOfElements = ol.size();		pageUtil.content = ol;		return pageUtil;	}	@Transactional	void createOrgration(Orgration orgration, BuyerOrgration buyerOrgration)	{		this.updateObject(orgration);		this.updateObject(buyerOrgration);	}	List<Orgration> queryOrgrationList()	{		return this.queryObject("select o from Orgration o");	}	List<Orgration> queryOrgration8Area(String area)	{		return this.queryObject("select o from Orgration o where o.area = :area",["area":area]);	}	int queryOrgrationCount8Name(String name)	{		return this.queryTotalRecordsCountByCondition("select count(o.id) from Orgration as o where o.name = :name",["name":name]);	}	List<ProductsPrivater> genOrgPrivaters(String orgId)	{		return this.queryObject("select ppr from ProductsPrivater ppr where ppr.privaterType = :privaterType and ppr.orgrationId = :orgrationId order by ppr.createDate",["privaterType":1 as byte,"orgrationId":orgId])?.each {ppr->			ppr?.cancelLazyEr();			ppr.productsPrivaterImagesList = this.queryObject("select pimg from ProductsPrivaterImages pimg where pimg.productsPrivater.id = :privaterId",["privaterId":ppr.id])?.each {pimg->				pimg.productsPrivater = null;			};		}	}	@Transactional	void updateOrgrationBuyerStatus(List<BuyerOrgration> buyerOrgrationList)	{		buyerOrgrationList.each {bo->			this.createNativeQuery("update orgration_buyer set status = '${bo.status}',isManager = ${bo.isManager},isCreater = ${bo.isCreater} where buyer_id = '${bo.buyerOrgrationPK.buyerId}' and orgration_id = '${bo.buyerOrgrationPK.orgrationId}'").executeUpdate();		}	}	@Transactional	void updateOrgrationBuyerBaseInfo(BuyerOrgration buyerOrgration)	{		StringBuffer sbf = new StringBuffer();		Map<String, Object> paramsMap = new HashMap<String, Object>();		paramsMap["buyerId"] = buyerOrgration.buyerOrgrationPK.buyerId;		paramsMap["niName"] = buyerOrgration.niName;		paramsMap["headImg"] = buyerOrgration.headImg;		sbf << "update BuyerOrgration set niName = :niName,headImg = :headImg where buyerOrgrationPK.buyerId = :buyerId";		if (!(buyerOrgration.buyerOrgrationPK.orgrationId in [null,""]))		{			sbf << " and buyerOrgrationPK.orgrationId = :orgrationId";			paramsMap["orgrationId"] = buyerOrgration.buyerOrgrationPK.orgrationId;		}		this.executeEQL(sbf.toString(),paramsMap);	}	@Transactional	BuyerOrgration updateOrgrationBuyer(BuyerOrgration buyerOrgration)	{//		BuyerOrgration bo = this.findObjectById(BuyerOrgration.class,buyerOrgration.buyerOrgrationPK);//		bo.headImg = buyerOrgration.headImg;//		bo.niName = buyerOrgration.niName;//		bo.area = buyerOrgration.area;//		bo.address = buyerOrgration.address;//		bo.latitude = buyerOrgration.latitude;//		bo.longitude = buyerOrgration.longitude;//		bo.description = buyerOrgration.description;		//buyerOrgrationPK.orgrationId = :orgrationId and		//"orgrationId":buyerOrgration.buyerOrgrationPK.orgrationId		this.executeEQL("update BuyerOrgration set headImg = :headImg,niName = :niName,description = :description where buyerOrgrationPK.buyerId = :buyerId",["headImg":buyerOrgration.headImg,"niName":buyerOrgration.niName,"description":buyerOrgration.description,"buyerId":buyerOrgration.buyerOrgrationPK.buyerId]);		this.executeEQL("update BuyerAppInfo set headImgUrl = :headImgUrl,wxNickName = :wxNickName,description = :description,workCompany = :workCompany where buyerAppInfoPK.appId = :appId and buyerAppInfoPK.buyerId = :buyerId",["headImgUrl":buyerOrgration.headImg,"wxNickName":buyerOrgration.niName,"description":buyerOrgration.description,"workCompany":buyerOrgration.tempMap["workCompany"],"appId":buyerOrgration.tempMap["appId"],"buyerId":buyerOrgration.buyerOrgrationPK.buyerId]);		return buyerOrgration;//this.updateObject(bo);	}	String phoneCode()	{		return "" + ((Math.random()) * 899999.0D + 100000.0D).toInteger();	}	String buildPasswordStr(v)	{		return v[6..28];	}}