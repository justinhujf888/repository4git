package com.weavict.shop.moduleimport com.weavict.common.util.DateUtilimport com.weavict.common.util.MathUtilimport com.weavict.shop.entity.*import groovy.json.JsonSlurperimport jodd.datetime.JDateTimeimport org.springframework.stereotype.Serviceimport org.springframework.transaction.annotation.Transactionalimport weixin.popular.bean.paymch.RefundNotifyReqInfo@Service("orderBean")class OrderBean extends ModuleBean{    List queryOrgTuanOrder8Product(String productId,String orgrationId,boolean ended)    {        return this.createNativeQuery("select ti.productid,to_char(ti.createdate,'yyyy-MM-dd hh24:mi:ss') as createdate,to_char(ti.enddate,'yyyy-MM-dd hh24:mi:ss') as enddate,ti.ordertotalbuyernum,ti.ordertotalamount,o.id from tuaninfo as ti left join orders as o on ti.id = o.tuaninfoid left join orderitem as oi on o.id = oi.order_id where o.ordertype = 1 and ti.ended = ${ended} and ti.productid = '${productId}' and o.orgration_id = '${orgrationId}'").getResultList();    }    List<TuanInfo> queryTuan8Product(String productId,boolean ended)    {        return this.queryObject("select t from TuanInfo as t where t.productId = :productId and t.ended = :ended",["productId":productId,"ended":ended]);    }    List<TuanInfo> queryTuanList(String productId,boolean hasEnd,boolean ended)    {        StringBuffer sbf = new StringBuffer();        Map<String, Object> paramsMap = new HashMap<String, Object>();        sbf << "select t from TuanInfo as t where 1=1";        if (!(productId in [null,""]))        {            sbf << " and t.productId = :productId";            paramsMap["productId"] = productId;        }        if (hasEnd)        {            sbf << " and t.ended = :ended";            paramsMap["ended"] = ended;        }        return this.queryObject(sbf.toString(),paramsMap);    }    List<Order> queryTuan8ProductOrders(String tuanInfoId,String orgrationId,byte orderType,byte orderStatus)    {        StringBuffer sbf = new StringBuffer();        sbf << "select o from Order as o where 1=1";        Map<String, Object> paramsMap = new HashMap<String, Object>();        if (!(tuanInfoId in [null,""]))        {            sbf << " and o.tuanInfoId = :tuanInfoId";            paramsMap["tuanInfoId"] = tuanInfoId;        }        if (!(orgrationId in [null,""]))        {            sbf << " and orgration.id = :orgrationId";            paramsMap["orgrationId"] = orgrationId;        }        if (orderType > (-1 as byte))        {            sbf << " and o.orderType = :orderType";            paramsMap["orderType"] = orderType;        }        if (orderStatus > (-1 as byte))        {            sbf << " and o.orderStatus = :orderStatus";            paramsMap["orderStatus"] = orderStatus;        }        return this.queryObject(sbf.toString(),paramsMap);    }    List<OrderItem> queryOrderItems8Order(String orderId)    {        return this.queryObject("select oi from OrderItem as oi where oi.order.id = :orderId",["orderId":orderId]);    }    List<OrderBuyers> queryOrderBuyers8Order(String orderId)    {        return this.queryObject("select ob from OrderBuyers as ob where ob.order.id = :orderId",["orderId":orderId]);    }    Map queryTuanOrders8Buyer(String buyerId,String privaterId,byte orderStatus)    {        StringBuffer sbf = new StringBuffer();        sbf << "select ob.id,ob.createdate,ob.ids,ob.price,ob.specimg,ob.buyer_phone,ob.order_id,ob.product_id,ob.paymentstatus,ob.paymentfee,ob.orderstatus,ob.orgrationid,ob.deliveryid,ob.deliveryname,ob.deliveryno,ob.deliveryquantity from orderbuyers ob left join orders o on o.id = ob.order_id where 1=1";        Map<String, Object> paramsMap = new HashMap<String, Object>();        if (!(buyerId in ["",null]))        {            sbf << " and ob.buyer_phone = :buyerId";            paramsMap["buyerId"] = buyerId;        }        if (!(privaterId in ["",null]))        {            sbf << " and o.privaterid = :privaterId";            paramsMap["privaterId"] = privaterId;        }        if (orderStatus > (-1 as byte))        {            sbf << " and ob.orderstatus = :orderStatus";            paramsMap["orderStatus"] = orderStatus;        }        else if (orderStatus == (-2 as byte))        {            //如果是已经付款或已经发货的状态；            sbf << " and (ob.orderstatus = 1 or ob.orderstatus = 4)";        }        sbf << " order by ob.createdate desc";        /*        ob.id,ob.createdate,ob.ids,ob.price,ob.specimg,        ob.buyer_phone,ob.order_id,ob.product_id,ob.paymentstatus,ob.paymentfee,        ob.orderstatus,ob.orgrationid,ob.deliveryid,ob.deliveryname,ob.deliveryno,        ob.deliveryquantity        */        List<OrderBuyers> orderBuyersList = new ArrayList();        this.createNativeQuery4Params(sbf.toString(),paramsMap).getResultList()?.each {            OrderBuyers ob = new OrderBuyers();            ob.id = it[0];            ob.createDate = it[1];            ob.ids = it[2];            ob.price = it[3] as int;            ob.specImg = it[4];            ob.buyer = new Buyer();            ob.buyer.phone = it[5];            ob.order = new Order();            ob.order.id = it[6];            ob.product = new Product();            ob.product.id = it[7];            ob.paymentStatus = it[8] as byte;            ob.paymentFee = it[9] as int;            ob.orderStatus = it[10] as byte;            ob.orgrationId = it[11];            ob.deliveryId = it[12];            ob.deliveryName = it[13];            ob.deliveryNo = it[14];            ob.deliveryQuantity = it[15] as int;            orderBuyersList << ob;        }                Map map = [:];        orderBuyersList?.each {            Product product = this.findObjectById(Product.class,it.product.id);            product.cancelLazyEr();            it.product = product;            it.buyer.description = "";            Order order = new Order();            order.id = it.order.id;            order.orderStatus = it.orderStatus;            order.orderType = 1 as byte;            order.createDate = it.createDate;            order.orgration = new Orgration();            order.buyer = new Buyer();            order.orgration = this.findObjectById(Orgration.class,it.orgrationId);            order.orgration.cancelLazyEr();            order.buyer.phone = it.buyer.phone;            order.orderBuyersList = new ArrayList();            order.orderBuyersList << it;            it.order = null;            if (map[order.orderStatus]==null)            {                map[order.orderStatus] = new ArrayList();            }            map[order.orderStatus] << order;            it.cancelLazyEr();        }        return map;    }    List<Order> queryOrders8Buyer(String buyerId,String privaterId,byte orderType,byte orderStatus)    {        StringBuffer sbf = new StringBuffer();        Map<String, Object> paramsMap = new HashMap<String, Object>();        sbf << "select o from Order o where 1=1";        if (!(buyerId in ["",null]))        {            sbf << " and o.buyer.phone = :buyerId";            paramsMap["buyerId"] = buyerId;        }        if (!(privaterId in ["",null]))        {            sbf << " and o.privaterId = :privaterId";            paramsMap["privaterId"] = privaterId;        }        if (orderType > (-1 as byte))        {            if (orderType == (100) as byte)            {                sbf << " and (o.orderType = :orderType1 or o.orderType = :orderType2 or o.orderType = :orderType3)";                paramsMap["orderType1"] = 0 as byte;                paramsMap["orderType2"] = 10 as byte;                paramsMap["orderType3"] = 4 as byte;            }            else            {                sbf << " and o.orderType = :orderType";                paramsMap["orderType"] = orderType;            }        }        if (orderStatus > (-1 as byte))        {            sbf << " and o.orderStatus = :orderStatus";            paramsMap["orderStatus"] = orderStatus;        }        return this.queryObject(sbf.toString(),paramsMap);    }    List<Order> queryTuanedOrderByTheProduct(String productId,String appId)    {        List<Order> orderList = new ArrayList();        this.createNativeQuery4Params("SELECT o.id,o.appid,o.buyer_phone,o.orderstatus,o.ordertype,o.dailino,o.ordertotalamount,o.ordertotalbuyernum,o.ordertotalqutitynum,o.description,pr.orgrationid,pr.productid,pr.price,ti.ended,ti.createdate,ti.enddate,bai.headimgurl,bai.wxnickname from orders o left join payreturnorder pr on pr.id = o.payreturnorderid left join tuaninfo ti on ti.id = o.tuaninfoid left join buyerappinfo bai on bai.buyerid = pr.buyerid where pr.productid = :productId and o.ordertype = :orderType and ti.ended = :ended and o.appid = :appId",["productId":productId,"orderType":2 as byte,"ended":false,"appId":appId]).getResultList()?.each {            /*            o.id,o.appid,o.buyer_phone,o.orderstatus,o.ordertype,            o.dailino,o.ordertotalamount,o.ordertotalbuyernum,o.ordertotalqutitynum,o.description,            pr.orgrationid,pr.productid            */            Order order = new Order();            order.id = it[0];            order.appId = it[1];            order.buyer = new Buyer();            order.buyer.phone = it[2];            order.orderStatus = it[3];            order.orderType = it[4];            order.dailiNo = it[5];            order.orderTotalAmount = it[6] as int;            order.orderTotalBuyerNum = it[7] as int;            order.orderTotalQutityNum = it[8] as int;            order.description = it[9];            order.orgration = new Orgration();            order.orgration.id = it[10];            order.tempMap = [:];            order.tempMap["productId"] = it[11];            order.tempMap["tuanPrice"] = it[12];            order.tempMap["ended"] = it[13] as boolean;            order.tempMap["beginDate"] = it[14];            order.tempMap["endDate"] = it[15];            order.tempMap["headImg"] = it[16];            order.tempMap["nickName"] = it[17];            orderList << order;        };        println orderList.dump();        return orderList;    }    List<OrderBuyers> queryOrderBuyers8TheProduct(String productId,String appId)    {        List<OrderBuyers> orderBuyersList = new ArrayList();        this.createNativeQuery4Params("select DISTINCT ob.buyer_phone,bai.headimgurl,bai.wxnickname from orderbuyers ob left join buyerappinfo bai on bai.buyerid = ob.buyer_phone where ob.order_id IN (SELECT o.id from orders o left join payreturnorder pr on pr.id = o.id left join tuaninfo ti on ti.id = o.tuaninfoid left join buyerappinfo bai on bai.buyerid = pr.buyerid where pr.productid = :productId and o.ordertype = :orderType and ti.ended = :ended and bai.appid = :appId)",["productId":productId,"orderType":2 as byte,"ended":false,"appId":appId]).getResultList()?.each {            OrderBuyers orderBuyers = new OrderBuyers();            orderBuyers.buyer = new Buyer();            orderBuyers.buyer.phone = it[0];            orderBuyers.buyer.headImgUrl = it[1];            orderBuyers.buyer.wxNickName = it[2];            orderBuyersList << orderBuyers;        }        return orderBuyersList;    }    List<OrderBuyers> queryBuyerTuanOrderList(String appId,String buyerId)    {        List<OrderBuyers> orderBuyersList = new ArrayList();        Map map = new HashMap();        this.createNativeQuery4Params("select ob.id obid,ob.buyer_phone,ob.orgrationid,ob.ids,ob.order_id,ob.paymentfee,ob.paymentstatus,ob.orderstatus,ob.specimg,ob.price,ob.product_id,ob.deliveryid,ob.deliveryname,ob.deliveryno,ob.deliveryfee,ob.deliverytype,ob.deliveryquantity,ob.shipzipcode,ob.shipname,ob.shipareapath,ob.shipaddress,ob.shipmobile,ob.shipphone,o.id oid,o.appid,o.ordertype,o.orderstatus oorderstatus,ti.createdate begindate,ti.enddate,ti.ended,ti.id tiid,ti.ordertotalamount,ti.ordertotalbuyernum,ti.ordertotalorgnum,ti.ordertotalqutitynum,ob.createdate,o.ordertotalamount oordertotalamount,o.ordertotalbuyernum oordertotalbuyernum,o.ordertotalqutitynum oordertotalqutitynum,o.description,o.buyer_phone obuyerphone from orderbuyers ob left join orders o on o.id = ob.order_id left join tuaninfo ti on ti.id = o.tuaninfoid where (o.buyer_phone = :buyerId or ob.buyer_phone = :buyerId) and o.appid = :appId order by ti.createdate desc",["appId":appId,"buyerId":buyerId]).getResultList()?.each {            /*            ob.id obid,ob.buyer_phone,ob.orgrationid,ob.ids,ob.order_id,            ob.paymentfee,ob.paymentstatus,ob.orderstatus,ob.specimg,ob.price,            ob.product_id,ob.deliveryid,ob.deliveryname,ob.deliveryno,ob.deliveryfee,            ob.deliverytype,ob.deliveryquantity,ob.shipzipcode,ob.shipname,ob.shipareapath,            ob.shipaddress,ob.shipmobile,ob.shipphone,o.id oid,o.appid,            o.ordertype,o.orderstatus oorderstatus,ti.createdate begindate,ti.enddate,ti.ended,            ti.id tiid,ti.ordertotalamount,ti.ordertotalbuyernum,ti.ordertotalorgnum,ti.ordertotalqutitynum,            ob.createdate,o.ordertotalamount,o.ordertotalbuyernum,o.ordertotalorgnum,o.ordertotalqutitynum,            o.description,o.buyer_phone obuyerphone            */            OrderBuyers orderBuyers = new OrderBuyers();            orderBuyers.id = it[0];            orderBuyers.buyer = new Buyer();            orderBuyers.buyer.phone = it[1];            orderBuyers.orgrationId = it[2];            orderBuyers.ids = it[3];            orderBuyers.order = new Order();            orderBuyers.order.id = it[4];            orderBuyers.paymentFee = it[5] as int;            orderBuyers.paymentStatus = it[6] as byte;            orderBuyers.orderStatus = it[7] as byte;            orderBuyers.specImg = it[8];            orderBuyers.price = it[9] as int;            orderBuyers.product = new Product();            orderBuyers.product.id = it[10];            orderBuyers.deliveryId = it[11];            orderBuyers.deliveryName = it[12];            orderBuyers.deliveryNo = it[13];            orderBuyers.deliveryFee = it[14]==null ? 0 : it[14] as int;            orderBuyers.deliveryType = it[15]==null ? 0 : it[15] as byte;            orderBuyers.deliveryQuantity = it[16]==null ? 0 : it[16] as int;            orderBuyers.shipZipCode = it[17];            orderBuyers.shipName = it[18];            orderBuyers.shipAreaPath = it[19];            orderBuyers.shipAddress = it[20];            orderBuyers.shipMobile = it[21];            orderBuyers.shipPhone = it[22];            orderBuyers.tempMap = [:];            orderBuyers.tempMap["orderId"] = it[23];            orderBuyers.tempMap["appId"] = it[24];            orderBuyers.order.orderType = it[25] as byte;            orderBuyers.order.orderStatus = it[26] as byte;            orderBuyers.tempMap["tuanBeginDate"] = it[27];            orderBuyers.tempMap["tuanEndDate"] = it[28];            orderBuyers.tempMap["tuanEnded"] = it[29] as boolean;            orderBuyers.tempMap["tuanId"] = it[30];            orderBuyers.tempMap["tuanOrderTotalAmount"] = it[31] as int;            orderBuyers.tempMap["tuanOrderTotalBuyerNum"] = it[32] as int;            orderBuyers.tempMap["tuanOrderTotalOrgNum"] = it[33] as int;            orderBuyers.tempMap["tuanOrderTotalQutityNum"] = it[34] as int;            orderBuyers.createDate = it[35];            orderBuyers.tempMap["orderTotalAmount"] = it[36] as int;            orderBuyers.tempMap["orderTotalBuyerNum"] = it[37] as int;            orderBuyers.tempMap["orderTotalQutityNum"] = it[38] as int;            orderBuyers.tempMap["orderDescription"] = it[39];            orderBuyers.tempMap["orderBuyerId"] = it[40];            if (map[orderBuyers.tempMap["orderId"]]==null)            {                orderBuyers.product.name = this.queryObject("select oi.productName from OrderItem oi where oi.order.id = :orderId",["orderId":orderBuyers.tempMap["orderId"]])?.get(0);                map[orderBuyers.tempMap["orderId"]] = orderBuyers.product.name;            }            else            {                orderBuyers.product.name = map[orderBuyers.tempMap["orderId"]];            }            orderBuyersList << orderBuyers;        }        return orderBuyersList;    }    @Transactional    PayReturnOrder preOrderGoingToPay(PayReturnOrder payReturnOrder,List<Order> orderList)    {        payReturnOrder.createDate = new Date();        payReturnOrder.paymentStatus = 0 as byte;        if (payReturnOrder.orderType == 0 as byte)        {            if (payReturnOrder.id in [null,""])            {                payReturnOrder.id = MathUtil.getPNewId();            }            orderList?.each {order->                order.payReturnOrderId = payReturnOrder.id;                if (order.id in [null,""])                {                    order.id = MathUtil.getPNewId();                    order.createDate = payReturnOrder.createDate;                }                List<OrderItem> orderItemList = order.orderItemList;                order.orderItemList = null;                this.updateObject(order);                orderItemList.each {orderItem->                    if (orderItem.id in [null,""])                    {                        orderItem.id = MathUtil.getPNewId();                        orderItem.createDate = order.createDate;                    }                    orderItem.order = order;                    this.updateObject(orderItem);                }            }        }        else//【除了orderType==0是提前生成预订单，其他都是支付后生成订单】 if (payReturnOrder.orderType in [1 as byte,10 as byte])        {            payReturnOrder.id = MathUtil.getPNewId();            if (payReturnOrder.orderType == 2 as byte)            {                payReturnOrder.orderId = payReturnOrder.id;            }        }        return this.updateObject(payReturnOrder);    }//    收到支付接口的异步返回后，把PayReturnOrder的支付状态设定为已支付，存储支付接口回调的信息，并减掉产品的库存；原来是为团购设计，但也可以用在会员单独购买    @Transactional    void payedReturnTuanOrder(PayReturnOrder payReturnOrder)    {        this.executeEQL("update PayReturnOrder set paymentStatus = :paymentStatus,tradeNo = :tradeNo,payReturnDatas = :payReturnDatas,refundId = :refundId where id = :id",["id":payReturnOrder.id,"tradeNo":payReturnOrder.tradeNo,"refundId":payReturnOrder.refundId,"paymentStatus": (1 as byte),"payReturnDatas":payReturnOrder.payReturnDatas]);        this.executeEQL("update Product set store = store - :deliveryQuantity where id = :id",["id":payReturnOrder.productId,"deliveryQuantity":payReturnOrder.deliveryQuantity]);        if (!(payReturnOrder.specId in [null,""]))        {            this.executeEQL("update ProductSpecSetup set store = store - :deliveryQuantity where id = :id",["id":payReturnOrder.specId,"deliveryQuantity":payReturnOrder.deliveryQuantity]);        }    }//    团购是支付成功了才会新增Order表，而单独购买是先生成未支付状态的Order信息，此方法用于单独购买支付成功后调用修改库存以及订单状态    @Transactional    void payedReturnOrderProcess(PayReturnOrder payReturnOrder)    {        this.payedReturnTuanOrder(payReturnOrder);        this.createNativeQuery4Params("update orders set orderstatus = (case when deliverytype=0 then 4 else 1 end),paymentstatus = :paymentStatus where payreturnorderid = :payreturnorderid",            ["payreturnorderid":payReturnOrder.id,"paymentStatus": 1 as byte]).executeUpdate();        this.executeEQL("update BuyerAppInfo set amb = amb + :p where buyerAppInfoPK.buyerId = :userId and buyerAppInfoPK.appId = :appId",["appId":payReturnOrder.appId,"userId":payReturnOrder.buyerId,"p":((payReturnOrder.paymentFee/100) as int)]);//        this.executeEQL("update Order set orderStatus = :orderStatus,paymentStatus = :paymentStatus where id = :id",//                ["id":payReturnOrder.id,"orderStatus":1 as byte,"paymentStatus": 1 as byte]);//        经过考虑，非团购不启用OrderBuyers这个表//        OrderBuyers orderBuyers = new OrderBuyers();//        orderBuyers.product = null;//        orderBuyers.specImg = payReturnOrder.specImg;//        orderBuyers.price = payReturnOrder.price;//        orderBuyers.paymentFee = payReturnOrder.price * payReturnOrder.deliveryQuantity;//        orderBuyers.paymentStatus = 1 as byte;//        orderBuyers.orderStatus = 1 as byte;//        orderBuyers.deliveryQuantity = payReturnOrder.deliveryQuantity;//        orderBuyers.id = payReturnOrder.id;//        orderBuyers.ids = payReturnOrder.ids;//        orderBuyers.buyer = new Buyer();//        orderBuyers.buyer.phone = payReturnOrder.buyerId;//        orderBuyers.order = new Order();//        orderBuyers.order.id = payReturnOrder.id;//        orderBuyers.createDate = new Date();//        this.updateObject(orderBuyers);    }    @Transactional    void payedReturnBookOrder(PayReturnOrder payReturnOrder)    {        this.executeEQL("update PayReturnOrder set paymentStatus = :paymentStatus,tradeNo = :tradeNo,refundId = :refundId,payReturnDatas = :payReturnDatas where id = :id",["id":payReturnOrder.id,"tradeNo":payReturnOrder.tradeNo,"refundId":payReturnOrder.refundId,"paymentStatus": (1 as byte),"payReturnDatas":payReturnOrder.payReturnDatas]);        def jsonSlpuer = new JsonSlurper();        def obj = jsonSlpuer.parseText(payReturnOrder.description);        this.executeEQL("update BuyerAppInfo set amb = amb + :p - :u where buyerAppInfoPK.buyerId = :userId and buyerAppInfoPK.appId = :appId",["appId":payReturnOrder.appId,"userId":obj.buyerId,"p":((payReturnOrder.paymentFee/100) as int),"u": obj.useAmb as int]);        //因为可以替其他用户购买，所以需要检查这个用户是否登录注册（注意是payReturnOrder.buyerId而不是obj.buyerId,payReturnOrder.buyerId是使用者，obj.buyerId是支付者）        if (!payReturnOrder.buyerId.equals(obj.buyerId))        {            if (this.findObjectById(Buyer.class,payReturnOrder.buyerId)==null)            {                Buyer buyer = new Buyer();                buyer.phone = payReturnOrder.buyerId;                buyer.createDate = new Date();                this.updateObject(buyer);            }        }//        支付后在产生订单的类型（不包含跟随拼团orderType==3的情况）        if (payReturnOrder.orderType in [10 as byte,2 as byte,4 as byte])        {            Order order = new Order();            order.appId = payReturnOrder.appId;            order.payReturnOrderId = payReturnOrder.id;            order.createDate = payReturnOrder.createDate;            order.privaterId = obj.privaterId;            order.deliveryType = obj.deliveryType as byte;            if (!(payReturnOrder.orgrationId in [null,""]))            {                Orgration orgration = new Orgration();                orgration.id = payReturnOrder.orgrationId;                order.orgration = orgration;            }//        order.orgration = this.findObjectById(Orgration.class,orgrationId);            order.buyer = new Buyer();            //obj.buyerId：实际付款的账号；payReturnOrder.buyerId：使用产品的账号            order.buyer.phone = obj.buyerId;            order.dailiNo = payReturnOrder.dailiNo;            order.paymentStatus = 1 as byte;            order.orderType = payReturnOrder.orderType;            order.tuanInfoId = null;            order.orderTotalQutityNum = payReturnOrder.deliveryQuantity;            order.orderTotalBuyerNum = 1 as int;            order.orderTotalAmount = payReturnOrder.paymentFee;            order.description = payReturnOrder.description;            order.shipMobile = obj.shipMobile;            order.shipName = obj.shipName;            order.shipAreaPath = obj.shipArea;            order.shipAddress = obj.shipAddress;            order.shipZipCode = obj.shipZipCode;            if (payReturnOrder.orderType == 2 as byte)            {//拼团购                //首次开团新增TuanInfo记录，方便查询统计；考虑了一下                TuanInfo tuanInfo = new TuanInfo();                tuanInfo.id = payReturnOrder.id;                tuanInfo.createDate = order.createDate;                tuanInfo.productId = payReturnOrder.productId;                tuanInfo.orderTotalQutityNum = order.orderTotalQutityNum;                tuanInfo.orderTotalAmount = order.orderTotalAmount;                tuanInfo.orderTotalBuyerNum = 1;                tuanInfo.orderTotalOrgNum = 1;                tuanInfo.endDate = cn.hutool.core.date.DateUtil.offsetDay(tuanInfo.createDate,obj.tuanDays as int);                tuanInfo.ended = false;                this.addObject(tuanInfo);                order.id = payReturnOrder.id;                order.tuanInfoId = tuanInfo.id;                order.paymentFee = payReturnOrder.paymentFee;//obj.tuanPrice;                if (obj.productType in ["book","coupon"])                {                    order.orderStatus = 1 as byte;//原本应该是1，要等拼团完成，但目前设置为2;付款就可以使用                    order.deliveryId = obj.productType;                }                else                {                    if (order.deliveryType==0 as byte)                    {                        order.orderStatus = 4 as byte;                    }                    else if (order.deliveryType==1 as byte)                    {                        order.orderStatus = 1 as byte;                    }                }            }            else if (payReturnOrder.orderType == 10 as byte)            {//一般个人购买；不提前生成订单，只适合一个订单一个商品的情况；一般用于虚拟产品                order.id = MathUtil.getPNewId();                order.paymentFee = payReturnOrder.paymentFee;                if (obj.productType in ["book","coupon"])                {                    //如果是虚拟产品，并且是单独购买，则付款即完成                    order.orderStatus = 2 as byte;                    order.deliveryId = obj.productType;                    if (obj.productType=="coupon")                    {//购买优惠券                        Coupon coupon = this.findObjectById(Coupon.class,obj.couponId);                        BuyerCoupon buyerCoupon = new BuyerCoupon();                        buyerCoupon.id = MathUtil.getPNewId();                        buyerCoupon.remark = coupon.remark;                        buyerCoupon.categoryId = coupon.categoryId;                        buyerCoupon.productId = coupon.productId;                        buyerCoupon.privaterId = coupon.productsPrivater.id;                        buyerCoupon.buyerId = payReturnOrder.buyerId;                        buyerCoupon.salsMinValue = coupon.salsMinValue;                        buyerCoupon.moneyValue = coupon.moneyValue;                        buyerCoupon.price = coupon.price;                        buyerCoupon.name = coupon.name;                        buyerCoupon.appId = coupon.appId;                        buyerCoupon.couponId = coupon.id;                        buyerCoupon.shiGuoQi = false;                        buyerCoupon.shiUsed = false;                        buyerCoupon.youXiaoDays = coupon.youXiaoDays;                        buyerCoupon.beginDate = new Date();                        buyerCoupon.endDate = cn.hutool.core.date.DateUtil.offsetDay(buyerCoupon.beginDate,coupon.youXiaoDays);                        this.addObject(buyerCoupon);                    }                }                else                {                    if (order.deliveryType==0 as byte)                    {                        order.orderStatus = 4 as byte;                    }                    else if (order.deliveryType==1 as byte)                    {                        order.orderStatus = 1 as byte;                    }                }            }            else if (payReturnOrder.orderType == 4 as byte)            {//到店消费                order.id = MathUtil.getPNewId();                order.orderStatus = 2 as byte;                order.paymentFee = payReturnOrder.paymentFee;            }            OrderItem orderItem = new OrderItem();            orderItem.createDate = order.createDate;            orderItem.id = MathUtil.getPNewId();            orderItem.deliveryQuantity = payReturnOrder.deliveryQuantity;            orderItem.ids = payReturnOrder.ids;            orderItem.productName = obj.productName;            orderItem.order = order;            orderItem.price = payReturnOrder.paymentFee;            orderItem.specImg = payReturnOrder.specImg;            if (!(obj.productType in ["book","coupon","atShop"]))            {                orderItem.product = new Product();                orderItem.product.id = payReturnOrder.productId;            }            this.updateObject(order);            this.updateObject(orderItem);        }        if (payReturnOrder.orderType in [2 as byte,3 as byte])        {            OrderBuyers orderBuyers = new OrderBuyers();            orderBuyers.product = null;            orderBuyers.specImg = payReturnOrder.specImg;            orderBuyers.price = payReturnOrder.price;            orderBuyers.paymentFee = payReturnOrder.paymentFee;            orderBuyers.paymentStatus = 1 as byte;            if (obj.productType in ["book","coupon"])            {                //如果是虚拟产品，目前团购设置为付款即完成                orderBuyers.orderStatus = 2 as byte;                orderBuyers.deliveryId = obj.productType;            }            else            {                orderBuyers.orderStatus = 1 as byte;            }            orderBuyers.deliveryQuantity = payReturnOrder.deliveryQuantity;            orderBuyers.id = payReturnOrder.id;            orderBuyers.ids = payReturnOrder.ids;            orderBuyers.buyer = new Buyer();            orderBuyers.buyer.phone = payReturnOrder.buyerId;            orderBuyers.order = new Order();//            if (payReturnOrder.orderType == 2 as byte)//            {//                orderBuyers.order.id = payReturnOrder.id;//            }//            else if (payReturnOrder.orderType == 3 as byte)//            {//                orderBuyers.order.id = payReturnOrder.orderId;//obj.orderId;//            }//            取消的原因是发起支付的时候，已经赋值到了payReturnOrder.orderId（在preOrderGoingToPay方法中已经对orderType=2的情况做了赋值处理）            orderBuyers.order.id = payReturnOrder.orderId;            orderBuyers.deliveryType = obj.deliveryType as byte;            orderBuyers.shipMobile = obj.shipMobile;            orderBuyers.shipName = obj.shipName;            orderBuyers.shipAreaPath = obj.shipArea;            orderBuyers.shipAddress = obj.shipAddress;            orderBuyers.shipZipCode = obj.shipZipCode;            orderBuyers.orgrationId = payReturnOrder.orgrationId;            orderBuyers.createDate = new Date();            if (!(obj.productType in ["book","coupon","atShop"]))            {                orderBuyers.product = new Product();                orderBuyers.product.id = payReturnOrder.productId;            }            this.updateObject(orderBuyers);            if (payReturnOrder.orderType == 3 as byte)            {                this.executeEQL("update Order set orderTotalAmount = orderTotalAmount + :orderTotalAmount,orderTotalBuyerNum = orderTotalBuyerNum + 1,orderTotalQutityNum = orderTotalQutityNum + :orderTotalQutityNum where id = :id",["id":payReturnOrder.orderId,"orderTotalAmount":payReturnOrder.paymentFee,"orderTotalQutityNum":payReturnOrder.deliveryQuantity]);                this.executeEQL("update TuanInfo set orderTotalAmount = orderTotalAmount + :orderTotalAmount,orderTotalBuyerNum = orderTotalBuyerNum + 1,orderTotalQutityNum = orderTotalQutityNum + :orderTotalQutityNum where id = :id",["id":payReturnOrder.orderId,"orderTotalAmount":payReturnOrder.paymentFee,"orderTotalQutityNum":payReturnOrder.deliveryQuantity]);                //检查是否满足最小拼团数量，如果满足就把该拼团下所有用户的数据加入bookBuyers，并修改订单表状态                if ((this.createNativeQuery4Params("select ordertotalqutitynum from orders where id = :id",["id":payReturnOrder.orderId]).getSingleResult() as int) >= (obj.minCount as int))                {                    this.executeEQL("update OrderBuyers set orderStatus = :orderStatus where order.id = :orderId",["orderId":payReturnOrder.orderId,"orderStatus":2 as byte]);//                    this.queryObject("select ob from OrderBuyers ob where ob.order.id = :orderId",["orderId":payReturnOrder.orderId])?.each {ob->////                    }                    this.executeEQL("update Order set orderStatus = :orderStatus where id = :id",["id":payReturnOrder.orderId,"orderStatus":2 as byte]);                }            }        }        if ((obj.useAmb as int) > 0)        {            JifenGoLog jfOut = new JifenGoLog();            jfOut.id = MathUtil.getPNewId();            jfOut.userType = 1 as byte;            jfOut.userId = obj.buyerId;            jfOut.productId = payReturnOrder.id;            jfOut.productJifen = obj.useAmb as int;            jfOut.jifenAfter = (obj.buyerAmb as int) - (obj.useAmb as int);            jfOut.createDate = payReturnOrder.createDate;            this.updateObject(jfOut);        }        JifenGoLog jfIn = new JifenGoLog();        jfIn.id = MathUtil.getPNewId();        jfIn.userType = 11 as byte;        jfIn.userId = obj.buyerId;        jfIn.productId = payReturnOrder.id;        jfIn.productJifen = payReturnOrder.paymentFee/100 as int;        jfIn.jifenAfter = (obj.buyerAmb as int) - (obj.useAmb as int) + (payReturnOrder.paymentFee/100 as int);        jfIn.createDate = payReturnOrder.createDate;        this.updateObject(jfIn);    }    //        应该--只用于大团购    @Transactional    TuanInfo createTuanInfo(Product product)    {        TuanInfo tuanInfo = new TuanInfo();        tuanInfo.id = MathUtil.getPNewId();        tuanInfo.productId = product.id;        tuanInfo.ended = false;        tuanInfo.createDate = new Date();        JDateTime jd = (new JDateTime(tuanInfo.createDate)).addDay(product.tgEndDays);        tuanInfo.endDate = DateUtil.parse("${jd.getYear()}-${jd.getMonth()}-${jd.getDay()} 23:59:59","yyyy-MM-dd HH:mm:ss");        if (product?.tempMap!=null)        {            tuanInfo.orderTotalAmount = product.tempMap["orderTotalAmount"];            tuanInfo.orderTotalBuyerNum = product.tempMap["orderTotalBuyerNum"];            tuanInfo.orderTotalQutityNum = product.tempMap["orderTotalQutityNum"];            tuanInfo.orderTotalOrgNum = product.tempMap["orderTotalOrgNum"];        }        else        {            tuanInfo.orderTotalAmount = 0;            tuanInfo.orderTotalBuyerNum = 0;            tuanInfo.orderTotalQutityNum = 0;            tuanInfo.orderTotalOrgNum = 0;        }        return this.updateObject(tuanInfo);    }    @Transactional    Order createTuanOrder(PayReturnOrder payReturnOrder,String tuanInfoId)    {//        应该--只用于大团购        Order order = new Order();        order.id = MathUtil.getPNewId();        order.createDate = new Date();        order.appId = payReturnOrder.appId;//        团购订单Order不需要payReturnOrderId；后来又加上了，测试看看有没有问题        order.payReturnOrderId = payReturnOrder.id;        order.description = payReturnOrder.description;        order.orgration = this.findObjectById(Orgration.class,payReturnOrder.orgrationId);        order.buyer = this.findObjectById(Buyer.class,payReturnOrder.buyerId);        order.dailiNo = payReturnOrder.dailiNo;        order.orderStatus = 1 as byte;        order.paymentStatus = 1 as byte;        order.orderType = 1;        order.tuanInfoId = tuanInfoId;        order.shipAreaPath = order.orgration.area;        order.shipAddress = order.orgration.address;        order.shipMobile = order.buyer.phone;        order.shipPhone = order.orgration.tel;        order.shipName = order.buyer.name;        order.orderTotalQutityNum = payReturnOrder.deliveryQuantity;        order.orderTotalBuyerNum = 1 as int;        order.orderTotalAmount = payReturnOrder.paymentFee;        order.paymentFee = order.orderTotalAmount;        order.privaterId = payReturnOrder.tempMap["privaterId"];//        先偷个懒，发货类型大团购以后应该改为由页面指定。应该来自于payReturnOrder.descripiton的json解析        order.deliveryType = 1 as byte;        OrderItem orderItem = new OrderItem();        orderItem.createDate = order.createDate;        orderItem.id = MathUtil.getPNewId();        orderItem.deliveryQuantity = 0;        orderItem.ids = payReturnOrder.ids;        orderItem.order = order;        orderItem.price = payReturnOrder.price;        orderItem.product = new Product();        orderItem.product.id = payReturnOrder.productId;        orderItem.specImg = payReturnOrder.specImg;        orderItem.productName = payReturnOrder.tempMap["productName"];//        OrderBuyers orderBuyers = new OrderBuyers();//        orderBuyers.product = orderItem.product;//        orderBuyers.specImg = specImg;//        orderBuyers.price = price;//        orderBuyers.deliveryQuantity = deliveryQuantity;//        orderBuyers.id = MathUtil.getPNewId();//        orderBuyers.ids = ids;//        orderBuyers.buyer = order.buyer;//        orderBuyers.order = order;//        orderBuyers.createDate = order.createDate;        this.updateObject(order);        this.updateObject(orderItem);//        createTuanInfo()方法已经设置了数量//        this.executeEQL("update TuanInfo set orderTotalOrgNum = orderTotalOrgNum + 1 where id = :id",["id":tuanInfoId]);//        this.updateObject(orderBuyers);//        this.executeEQL("update TuanInfo set orderTotalAmount = orderTotalAmount + :orderTotalAmount,orderTotalQutityNum = orderTotalQutityNum + :orderTotalQutityNum where id = :id",["id":tuanInfoId,"orderTotalQutityNum":deliveryQuantity,"orderTotalAmount":deliveryQuantity * price]);//        order.orderBuyersList = new ArrayList<OrderBuyers>();//        order.orderBuyersList.add(orderBuyers);        order.orderItemList = new ArrayList();        order.orderItemList.add(orderItem);        return order;    }    @Transactional    void createOrderBuyers4BigTuan(PayReturnOrder payReturnOrder)    {        /*于2023年4月2日考虑决定，支付return处理，改成同步只更新库存状态等以及生成orderBuyers，orderBuyers.order先暂时设定null，其他处理异步由队列执行，orderBuyers.order在异步处理时用update方式更新。* *///        为了考虑同步的事物一致性，把payedReturnTuanOrder()方法放到这里执行，形成一个事物（事物嵌套）        this.payedReturnTuanOrder(payReturnOrder);        OrderBuyers orderBuyers = new OrderBuyers();        orderBuyers.orgrationId = payReturnOrder.orgrationId;        orderBuyers.product = new Product();        orderBuyers.product.id = payReturnOrder.productId;        orderBuyers.specImg = payReturnOrder.specImg;        orderBuyers.price = payReturnOrder.price;        orderBuyers.paymentFee = payReturnOrder.paymentFee;        orderBuyers.paymentStatus = 1 as byte;        orderBuyers.orderStatus = 1 as byte;        orderBuyers.deliveryQuantity = payReturnOrder.deliveryQuantity;        orderBuyers.id = payReturnOrder.id;        orderBuyers.ids = payReturnOrder.ids;        orderBuyers.buyer = new Buyer();        orderBuyers.buyer.phone = payReturnOrder.buyerId;//        之前形态//        orderBuyers.order = new Order();//        orderBuyers.order.id = orderId;//        orderBuyers.order设定为null        orderBuyers.order = null;        orderBuyers.createDate = new Date();        this.updateObject(orderBuyers);    }    @Transactional    OrderBuyers joinTuan8Org(String tuanInfoId,String orderId,PayReturnOrder payReturnOrder,boolean isCreaterOrder,boolean isCreateTuanInfo)    {//        /*//        于2023年4月2日考虑决定，支付return处理，改成同步只更新库存状态等以及生成orderBuyers，//        orderBuyers.order先暂时设定null，其他处理异步由队列执行，orderBuyers.order在异步处理//        时用update方式更新。//        * *///        OrderBuyers orderBuyers = new OrderBuyers();//        orderBuyers.orgrationId = payReturnOrder.orgrationId;//        orderBuyers.product = new Product();//        orderBuyers.product.id = payReturnOrder.productId;//        orderBuyers.specImg = payReturnOrder.specImg;//        orderBuyers.price = payReturnOrder.price;//        orderBuyers.paymentFee = payReturnOrder.paymentFee;//        orderBuyers.paymentStatus = 1 as byte;//        orderBuyers.orderStatus = 1 as byte;//        orderBuyers.deliveryQuantity = payReturnOrder.deliveryQuantity;//        orderBuyers.id = payReturnOrder.id;//        orderBuyers.ids = payReturnOrder.ids;//        orderBuyers.buyer = new Buyer();//        orderBuyers.buyer.phone = payReturnOrder.buyerId;////        之前形态////        orderBuyers.order = new Order();////        orderBuyers.order.id = orderId;////        orderBuyers.order设定为null//        orderBuyers.order = null;////        orderBuyers.createDate = new Date();//        orderBuyers = this.updateObject(orderBuyers);//        修改同步处理中orderBuyers中order（同步处理中设置成了null）        this.createNativeQuery4Params("update orderbuyers set order_id = :orderId where id = :id",["orderId":orderId,"id":payReturnOrder.id]).executeUpdate();        if (!isCreaterOrder)        {            this.executeEQL("update Order set orderTotalAmount = orderTotalAmount + :orderTotalAmount,orderTotalQutityNum = orderTotalQutityNum + :orderTotalQutityNum where id = :id",["id":orderId,"orderTotalQutityNum":payReturnOrder.deliveryQuantity,"orderTotalAmount":payReturnOrder.paymentFee]);        }        if (!isCreateTuanInfo)        {            this.executeEQL("update TuanInfo set orderTotalAmount = orderTotalAmount + :orderTotalAmount,orderTotalQutityNum = orderTotalQutityNum + :orderTotalQutityNum where id = :id",["id":tuanInfoId,"orderTotalQutityNum":payReturnOrder.deliveryQuantity,"orderTotalAmount":payReturnOrder.paymentFee]);        }//        return orderBuyers，返回后似乎没有使用//        return orderBuyers;        return null;    }    @Transactional    void deleteTheOrder(String orderId,byte orderType)    {        if (orderType==0)        {            this.executeEQL("delete OrderItem where order.id = :orderId",["orderId":orderId]);            this.executeEQL("delete Order where id = :orderId",["orderId":orderId]);//            this.executeEQL("delete PayReturnOrder where id = :id",["id":orderId]);        }        else if (orderType==1)        {            this.executeEQL("delete PayReturnOrder where id = :id",["id":orderId]);            this.executeEQL("delete OrderBuyers where id = :id",["id":orderId]);        }    }    @Transactional    void deletePayReturnOrders(String payReturnOrderId)    {        this.executeEQL("delete PayReturnOrder where id = :id",["id":payReturnOrderId]);        this.queryObject("select o.id from Order o where payReturnOrderId = :payReturnOrderId and orderType = 0 and orderStatus = 0",["payReturnOrderId":payReturnOrderId])?.each {oid->            this.executeEQL("delete OrderItem where order.id = :orderId",["orderId":oid as String]);            this.executeEQL("delete Order where id = :orderId",["orderId":oid as String]);        }    }    @Transactional    void updateOrderStatus(String orderId,byte orderType,byte orderStatus,String orderBuyersId,boolean allTuanOrder,String orgId)    {        if (orderType==0)        {            this.executeEQL("update Order set orderStatus = :orderStatus where id = :orderId",["orderId":orderId,"orderStatus":orderStatus]);        }        else if (orderType==1)        {            if (allTuanOrder)            {                this.executeEQL("update OrderBuyers set orderStatus = :orderStatus where order.id = :id",["id":orderId,"orderStatus":orderStatus]);                this.executeEQL("update Order set orderStatus = :orderStatus where id = :orderId",["orderId":orderId,"orderStatus":orderStatus]);            }            else            {                if (orgId in [null,""])                {                    this.executeEQL("update OrderBuyers set orderStatus = :orderStatus where id = :id",["id":orderBuyersId,"orderStatus":orderStatus]);                    if ((!orderId in [null,""]) && (orderStatus in [2 as byte,12 as byte]))                    {                        this.executeEQL("update Order set orderStatus = :orderStatus where id = :orderId",["orderId":orderId,"orderStatus":orderStatus]);                    }                }                else                {                    this.executeEQL("update OrderBuyers set orderStatus = :orderStatus where order.id = :orderId and orgrationId = :orgrationId",["orderId":orderId,"orgrationId":orgId,"orderStatus":orderStatus]);                }            }        }    }    Map queryOrderKdWuLiuInfo(String orderId)    {        def op = this.createNativeQuery4Params("select pr.appid,pr.paytype,pr.tradeno,o.shipmobile,ba.wxid from payreturnorder pr left join orders o on o.payreturnorderid = pr.id left join buyerappinfo ba on ba.appid = pr.appid and ba.buyerid = pr.buyerid where o.id = :orderId",["orderId":orderId]).getResultList()[0];        def map = [:];        map["appId"] = op[0];        map["payType"] = op[1] as byte;        map["tradeNo"] = op[2];        map["buyerId"] = op[3];        map["openId"] = op[4];        return map;    }    @Transactional    void updateOrderKdInfo(String deliveryId,String deliveryName,String deliveryNo,int deliveryFee,String orderId,String waybillToken,byte orderType)    {        //这一段在order.description中加入微信小程序物流插件的token，没有另外加字段的原因是，其他第三方的接口并没有这样的token，传入快递单号就好了，所以以后可能还是使用第三方接口//        Order order = this.findObjectById(Order.class,orderId);//        def jsonSlpuer = new JsonSlurper();//        def obj = jsonSlpuer.parseText(order.description);//        obj["waybillToken"] = waybillToken;//        def jsonBuilder = new JsonBuilder(obj);//        order.description = jsonBuilder.toString();        //        if (orderType == 0 as byte)        {            this.createNativeQuery4Params("update orders set deliveryid = :deliveryId,deliveryname = :deliveryName,deliveryno = :deliveryNo,deliveryfee = :deliveryFee where id = :orderId and ordertype = 0",                    ["deliveryId":deliveryId,"deliveryName":deliveryName,"deliveryNo":deliveryNo,"deliveryFee":deliveryFee,"orderId":orderId]).executeUpdate();        }        else if (orderType == 1 as byte)        {            this.createNativeQuery4Params("update orders set deliveryid = :deliveryId,deliveryname = :deliveryName,deliveryno = :deliveryNo,deliveryfee = :deliveryFee where id = :orderId and ordertype = 1",            ["deliveryId":deliveryId,"deliveryName":deliveryName,"deliveryNo":deliveryNo,"deliveryFee":deliveryFee,"orderId":orderId]).executeUpdate();            this.createNativeQuery4Params("update orderbuyers set deliveryid = :deliveryId,deliveryname = :deliveryName,deliveryno = :deliveryNo,deliveryfee = :deliveryFee where order_id = :orderId",            ["deliveryId":deliveryId,"deliveryName":deliveryName,"deliveryNo":deliveryNo,"deliveryFee":deliveryFee,"orderId":orderId]).executeUpdate();        }    }    List products8Tuan(String orgrationId,String productId,String tuanId,boolean hasTuanEnd,boolean tuanEnd)    {        return this.createNativeQuery("select tuan.id tuanid,orders.orgration_id,p.id productid,p.name,p.masterimg,tuan.ordertotalorgnum,tuan.ordertotalqutitynum from tuaninfo tuan left join product p on p.id = tuan.productid left join orders on orders.tuaninfoid = tuan.id where 1=1 ${!hasTuanEnd ? "" : "and tuan.ended = ${tuanEnd}"} ${orgrationId in [null,""] ? "" : "and orders.orgration_id = '${orgrationId}'"} ${productId in [null,""] ? "" : "and p.id = '${productId}'"} ${tuanId in [null,""] ? "" : "and tuan.id = '${tuanId}'"}").getResultList();    }    List orderTuanProductList(String privaterId,String beginDate,String endDate)    {        List<TuanInfo> l = new ArrayList();        String sql = "";//        where tuan.ended = true            now() - interval '6 months' and now()        if (privaterId in [null,""])        {            sql = "select tuan.id,tuan.productid,p.name,tuan.ended,tuan.createdate,tuan.enddate,p.masterimg,tuan.ordertotalqutitynum,p.tgpersonscount from tuaninfo tuan left join product p on tuan.productid = p.id left join brand brand on brand.id = p.brand_id left join productsprivater privater on privater.id = p.productprivater_id where tuan.createdate BETWEEN '${beginDate}' and '${endDate}' order by tuan.createdate desc";        }        else        {            sql = "select tuan.id,tuan.productid,p.name,tuan.ended,tuan.createdate,tuan.enddate,p.masterimg,tuan.ordertotalqutitynum,p.tgpersonscount from tuaninfo tuan left join product p on tuan.productid = p.id left join brand brand on brand.id = p.brand_id left join productsprivater privater on privater.id = p.productprivater_id where privater.id = '${privaterId}' and tuan.createdate BETWEEN '${beginDate}' and '${endDate}' order by tuan.createdate desc";        }        this.createNativeQuery(sql).getResultList()?.each{tuan->            TuanInfo tuanInfo = new TuanInfo();            tuanInfo.id = tuan[0];            tuanInfo.productId = tuan[1];            tuanInfo.tempMap = [:];            tuanInfo.tempMap["productName"] = tuan[2];            tuanInfo.ended = tuan[3] as boolean;            tuanInfo.createDate = tuan[4];            tuanInfo.endDate = tuan[5];            tuanInfo.tempMap["masterImg"] = tuan[6];            tuanInfo.orderTotalQutityNum = tuan[7] as int;            tuanInfo.tempMap["tgPersonCount"] = tuan[8] as int;            l << tuanInfo;        }        return l;    }//    团购订单    List orderReport8Privater(String appId,String privaterId,String productId,String tuanId)    {        List l = new ArrayList();        String sql = "";//tuan.ended = true        List<String> idsArray = new ArrayList();        this.createNativeQuery4Params("select ob.ids from payreturnorder pr left join product p on p.id = pr.productid left join orderbuyers ob on pr.id = ob.id left join orders o on o.id = ob.order_id where o.tuaninfoid = :tuanInfoId and POSITION(''||pr.paymentstatus||',' in ('1,2,4,9,11,12,'))>0 group by ob.ids",                ["tuanInfoId":tuanId]).getResultList()?.each {spec->            idsArray << spec;        };        if (privaterId in [null,""])        {            sql = "select tuan.id,tuan.productid,p.name,tuan.ended,tuan.createdate,tuan.enddate,tuan.ordertotalamount,tuan.ordertotalqutitynum from tuaninfo tuan left join product p on tuan.productid = p.id left join brand brand on brand.id = p.brand_id left join productsprivater privater on privater.id = p.productprivater_id where 1=1 ${tuanId in [null,""] ? "" : "and tuan.id = '${tuanId}'"} ${productId in [null,""] ? "" : "and tuan.productid = '${productId}'"} order by tuan.createdate";        }        else        {            sql = "select tuan.id,tuan.productid,p.name,tuan.ended,tuan.createdate,tuan.enddate,tuan.ordertotalamount,tuan.ordertotalqutitynum from tuaninfo tuan left join product p on tuan.productid = p.id left join brand brand on brand.id = p.brand_id left join productsprivater privater on privater.id = p.productprivater_id where 1=1 ${tuanId in [null, ""] ? "" : "and tuan.id = '${tuanId}'"} ${productId in [null, ""] ? "" : "and tuan.productid = '${productId}'"} and privater.id = '${privaterId}' order by tuan.createdate" ;        }        this.createNativeQuery(sql).getResultList()?.each {tuan->            Map map = ["orderType":1,"tuanInfo":["id":tuan[0],"ended":tuan[3],"productId":tuan[1],"productName":tuan[2],"tuanCreateDate":tuan[4],"tuanEndDate":tuan[5],"orderTotalAmount":tuan[6],"orderTotalQutityNum":tuan[7],                           "orgs":[]            ]];//            由查询productspecsetup改成了group by orderbuyers的ids，在循环上面//            this.createNativeQuery("select ids from productspecsetup psp where psp.product_id = '${tuan[1]}'").getResultList()?.each{spec ->//                StringBuffer sbf = new StringBuffer();//                def jsonSlpuer = new JsonSlurper();//                def obj = jsonSlpuer.parseText(spec);//                println obj?.dump();//                obj?.each {jo->//                    sbf << "${jo.name},";//                }//                idsArray << sbf.toString()[0..sbf.toString().length()-1-1];//                sbf.delete(0,sbf.length()-1);//            }            map["tuanInfo"]["orgs"] = [];            this.createNativeQuery("select distinct org.id,org.name,org.area,org.address,o.deliveryid,o.deliveryname,o.deliveryno,o.id orderId,o.createdate ordercreatedate,o.deliverytype,o.ordertotalamount,o.ordertotalqutitynum from tuaninfo tuan left join orders o on o.tuaninfoid = tuan.id left join orgration org on org.id = o.orgration_id where tuan.id = '${tuan[0]}' order by o.createdate").getResultList()?.each {org->                Map orgInfoMap = ["orgInfo":["orgId":org[0],"orgName":org[1],"orgArea":org[2],"orgAddress":org[3],"orderId":org[7],"orderCreateDate":org[8],"orderTotalAmount":org[10],"orderTotalQutityNum":org[11],                                             "contect":({                                                def cl = this.createNativeQuery("select distinct buyer.wxnickname,buyer.buyerid from orgration org left join orgration_buyer orgbuyer on org.id = orgbuyer.orgration_id left join buyerappinfo buyer on buyer.buyerid = orgbuyer.buyer_id where buyer.appid = '${appId}' and org.id = '${org[0]}' and orgbuyer.iscreater = true").getResultList();                                                 if (cl!=null && cl.size()>0)                                                {                                                    def contect = cl[0];                                                    return ["phone":contect[1],"name":contect[0]];                                                }                                                 else                                                 {                                                     return ["phone":null,"name":null];                                                 }                                            }).call()],                                            "deliveryInfo":["deliveryId":org[4],"deliveryName":org[5],"deliveryNo":org[6],"deliveryType":org[9]],                                  "datas":[],"idsDatas":[],"orderStatusInfo":[]]                if (idsArray.size()>0)                {                    idsArray.each {ids->                        println "________________________";                        println ids;                        orgInfoMap["idsDatas"] << ["idsName":ids,"quantity":this.createNativeQuery("select sum(pr.deliveryquantity) from payreturnorder pr left join product p on p.id = pr.productid left join orderbuyers ob on pr.id = ob.id left join orders o on o.id = ob.order_id left join tuaninfo tuan on tuan.id = o.tuaninfoid where tuan.id = '${tuan[0]}' and o.id = '${org[7]}' and pr.ids = '${ids}' and POSITION(''||pr.paymentstatus||',' in ('1,2,4,9,11,12,'))>0").getSingleResult()];//                        orgInfoMap["orderStatusInfo"] = this.createNativeQuery("select orderstatus from orderbuyers where order_id = '${tuan[0]}' and orgrationid = '${org[0]}' and and ids = '${ids}' group by orderstatus").getSingleResult();                    };                }                orgInfoMap["datas"] = this.createNativeQuery("select sum(pr.deliveryquantity) from payreturnorder pr left join product p on p.id = pr.productid left join orderbuyers ob on pr.id = ob.id left join orders o on o.id = ob.order_id where o.tuaninfoid = '${tuan[0]}' and o.id = '${org[7]}' and POSITION(''||pr.paymentstatus||',' in ('1,2,4,9,11,12,'))>0").getSingleResult();//                List statusList = this.createNativeQuery("select ob.orderstatus from orderbuyers ob left join orders on ob.order_id = orders.id where orders.tuaninfoid = '${tuan[0]}' and ob.orgrationid = '${org[0]}' group by ob.orderstatus").getResultList();                orgInfoMap["orderStatusInfo"] = this.createNativeQuery("select orderstatus from orders where id = '${org[7]}'").getSingleResult();                map["tuanInfo"]["orgs"] << orgInfoMap;            }            l << map;        }        return l;    }    //此方法用于发货    List orderReportOrgDetail(String tuanInfoId,String orderId,String ids)    {//                this.createNativeQuery("select pr.orgrationid,o.ordertype,ob.order_id tuanorderid,ob.id orderid,pr.productid,p.name,pr.ids,pr.specid, pr.deliveryquantity deliveryquantity,pr.paymentfee from payreturnorder pr left join product p on p.id = pr.productid left join orderbuyers ob on pr.id = ob.id left join orders o on o.id = ob.order_id left join tuaninfo tuan on tuan.id = o.tuaninfoid where tuan.id = '${tuanInfoId}' ${ids in [null,""] ? "" : "and pr.ids = '${ids}'"} and pr.orgrationid = '${orgId}'").getResultList();        StringBuffer sbf = new StringBuffer();        Map<String, Object> paramsMap = new HashMap<String, Object>();        sbf << "select distinct pr.id,buyapp.buyerid,buyapp.wxnickname,buyapp.headimgurl,pr.ids,pr.deliveryquantity,pr.paymentfee,ob.orderstatus from payreturnorder pr left join product p on p.id = pr.productid left join orderbuyers ob on pr.id = ob.id left join orders o on o.id = ob.order_id left join tuaninfo tuan on tuan.id = o.tuaninfoid left join buyerappinfo buyapp on buyapp.buyerid = pr.buyerid  where tuan.id = :tuanId";        paramsMap["tuanId"] = tuanInfoId;        if (!(ids in [null,""]))        {            sbf << " and pr.ids = :ids";            paramsMap["ids"] = ids;        }        sbf << " and o.id = :orderId";        paramsMap["orderId"] = orderId;        List<OrderBuyers> orderBuyersList = new ArrayList();        this.createNativeQuery4Params(sbf.toString(),paramsMap).getResultList()?.each {            OrderBuyers orderBuyers = new OrderBuyers();            orderBuyers.tempMap = [:];            orderBuyers.tempMap["payReturnOrderId"] = it[0];            orderBuyers.buyer = new Buyer();            orderBuyers.buyer.phone = it[1];            orderBuyers.buyer.wxNickName = it[2];            orderBuyers.buyer.headImgUrl = it[3];            orderBuyers.ids = it[4];            orderBuyers.deliveryQuantity = it[5] as int;            orderBuyers.paymentFee = it[6] as int;            orderBuyers.orderStatus = it[7] as byte;            orderBuyersList << orderBuyers;        };        return orderBuyersList;    }//    用于订单查询大货团购的明细    List tuanOrderDetailOrg(String orderId)    {        List<PayReturnOrder> payReturnOrderList = new ArrayList();        this.createNativeQuery4Params("select distinct pr.id,buyer.phone,buyer.name,buyapp.wxnickname,buyapp.headimgurl,pr.ids,pr.deliveryquantity,pr.paymentfee,pr.createdate,p.name productname,ob.orderstatus from payreturnorder pr left join product p on p.id = pr.productid left join orderbuyers ob on pr.id = ob.id left join orders o on o.id = ob.order_id left join buyerappinfo buyapp on buyapp.buyerid = pr.buyerid left join buyer on buyer.phone = pr.buyerid where o.id = :orderId",["orderId":orderId]).getResultList()?.each {            PayReturnOrder payReturnOrder = new PayReturnOrder();            payReturnOrder.id = it[0];            payReturnOrder.buyerId = it[1];            payReturnOrder.tempMap = [:];            payReturnOrder.tempMap["buyerName"] = it[2];            payReturnOrder.tempMap["niName"] = it[3];            payReturnOrder.tempMap["headImgUrl"] = it[4];            payReturnOrder.ids = it[5];            payReturnOrder.deliveryQuantity = it[6] as int;            payReturnOrder.paymentFee = it[7] as int;            payReturnOrder.createDate = it[8];            payReturnOrder.tempMap["productName"] = it[9];            payReturnOrder.tempMap["orderStatus"] = it[10];            payReturnOrderList << payReturnOrder;        };        return payReturnOrderList;    }//    个人订单（用于商户订单查询，不用于用户订单查询）    Map geRenOrderGroupBy(Map map)    {        List orderList = new ArrayList();        StringBuffer sbf = new StringBuffer();        Map<String, Object> paramsMap = new HashMap<String, Object>();        String sql1 = "select o.id,o.privaterid,o.ordertotalqutitynum,o.paymentfee,o.createdate,o.shipareapath,o.shipaddress,o.shipmobile,o.shipphone,o.shipname,o.shipzipcode,pp.name,pp.id ppid,o.orderstatus,o.ordertype,o.deliverytype,o.deliveryid,o.deliveryname,o.deliveryno,o.deliveryfee,o.ordertotalamount,o.buyer_phone,bai.wxnickname,bai.headimgurl from orders o left join productsprivater pp on pp.id = o.privaterid left join buyerappinfo bai on bai.buyerid = o.buyer_phone where o.appid = :appId and o.orderstatus > 0";        String sql2 = "select sum(o.paymentfee) paymentfee,sum(o.ordertotalamount) ordertotalamount from orders o where o.appid = :appId and o.orderstatus > 0";        paramsMap["appId"] = map["appId"];        if (!(map["privaterId"] in [null,""]))        {            sbf << " and o.privaterid = :privaterId";            paramsMap["privaterId"] = map["privaterId"];        }        if (!(map["orderId"] in [null,""]))        {            sbf << " and o.id like :orderId";            paramsMap["orderId"] = "%${map["orderId"]}%";        }        if (map["orderType"] > (-1 as byte))        {            sbf << " and o.ordertype = :orderType";            paramsMap["orderType"] = map["orderType"];        }        if (map["orderStatus"] > (-1 as byte))        {            sbf << " and o.orderstatus = :orderStatus";            paramsMap["orderStatus"] = map["orderStatus"];        }        if (map["beginDate"]!=null && map["endDate"]!=null)        {            sbf << " and (o.createdate between :beginDate and :endDate)";            paramsMap["beginDate"] = map["beginDate"];            paramsMap["endDate"] = map["endDate"];        }        this.createNativeQuery4Params("${sql1}${sbf.toString()} order by o.createdate desc",paramsMap).getResultList()?.each {            Order order = new Order();            order.id = it[0];            order.privaterId = it[1];            order.orderTotalQutityNum = it[2];            order.paymentFee = it[3];            order.createDate = it[4];            order.shipAreaPath = it[5];            order.shipAddress = it[6];            order.shipMobile = it[7];            order.shipPhone = it[8];            order.shipName = it[9];            order.shipZipCode = it[10];            order.privaterId = it[12];            order.orderStatus = it[13] as byte;            order.orderType = it[14] as byte;            order.deliveryType = it[15] as byte;            order.deliveryId = it[16];            order.deliveryName = it[17];            order.deliveryNo = it[18];            order.deliveryFee = it[19];            order.orderTotalAmount = it[20];            order.buyer = new Buyer();            order.buyer.phone = it[21];            order.buyer.wxNickName = it[22];            order.buyer.headImgUrl = it[23];            order.tempMap = [:];            order.tempMap["privaterName"] = it[11];            order.orderItemList = this.queryOrderItems8Order(order.id)?.each {                it.cancelLazyEr();            };            orderList << order;        };        return ["orderList":orderList,"statistics":this.createNativeQuery4Params("${sql2}${sbf.toString()}",paramsMap).getResultList()];    }//  个人订单明细    List orderReportGeRenDetail(String orderId)    {        List<OrderItem> orderItemList = new ArrayList();        this.createNativeQuery4Params("select oi.id,oi.ids,oi.price,oi.deliveryquantity,oi.specimg,p.id productid,p.name,p.masterimg from orderitem oi left join product p on p.id = oi.product_id where oi.order_id = :orderId",["orderId":orderId]).getResultList()?.each {            OrderItem orderItem = new OrderItem();            orderItem.id = it[0];            orderItem.ids = it[1];            orderItem.price = it[2];            orderItem.deliveryQuantity = it[3];            orderItem.specImg = it[4];            orderItem.product = new Product();            orderItem.product.id = it[5];            orderItem.product.name = it[6];            orderItem.product.masterImg = it[7];            orderItemList << orderItem;        };        return orderItemList;    }    @Transactional    void tuiKuanReturnCall(RefundNotifyReqInfo refundNotifyReqInfo,String xml)    {        String payReturnOrderId = refundNotifyReqInfo.out_trade_no.split("_")[0];        def rs = this.createNativeQuery4Params("select ordertype,paymentstatus from payreturnorder where id = :id",["id":payReturnOrderId]).getSingleResult();        if (rs[1] as byte != 12 as byte)        {            this.createNativeQuery4Params("update payreturnorder set paymentstatus = :payMentStatus,refundno = :refundNo,payreturndatas = :xml where id = :id",                    ["id":payReturnOrderId,"payMentStatus":12,"refundNo":refundNotifyReqInfo.refund_id,"xml":xml]).executeUpdate();            if (rs[0] as byte == 0 as byte)            {                this.createNativeQuery4Params("update orders set orderstatus = :orderStatus where payreturnorderid = :id",["id":payReturnOrderId,"orderStatus":12 as byte]).executeUpdate();            }            else if ((rs[0] as byte) in [1 as byte,2 as byte,3 as byte])            {                this.createNativeQuery4Params("update orders set orderstatus = :orderStatus where payreturnorderid = :id",["id":payReturnOrderId,"orderStatus":12 as byte]).executeUpdate();                this.createNativeQuery4Params("update orderbuyers set orderstatus = :orderStatus where id = :id",["id":payReturnOrderId,"orderStatus":12 as byte]).executeUpdate();            }        }    }    List<Coupon> queryCoupon8ThePrivater(String appId,String privaterId)    {        return this.queryObject("select c from Coupon c where c.appId = :appId and c.productsPrivater.id = :privaterId",["appId":appId,"privaterId":privaterId]);    }    List<Coupon> queryCouponList4ShiYouXiao8Buyer(String appId,String buyerId,String privaterId,String orgrationId)    {        StringBuffer sbf = new StringBuffer();        Map<String, Object> paramsMap = new HashMap<String, Object>();        sbf << "select c.id,c.name,c.price,c.moneyvalue,c.salsminvalue,c.shiyouxiao,c.youxiaodays,pp.id as pp_id,pp.name as pp_name,c.categoryid,c.productid,c.remark,c.cangetcount,c.createdate,(select c.cangetcount-count(id) from buyercoupon where buyerid = :buyerId and couponid=c.id";        sbf << " and (case c.shiloopuse when true then (shiused=false and shiguoqi<>true) else 1=1 end)"        sbf << ") as buyercangetcount,c.shiloopuse from coupon c left join productsprivater pp on pp.id = c.productsprivater_id where c.appid = :appId and pp.orgrationid = :orgrationId and c.shiyouxiao = :shiYouXiao";        paramsMap["appId"] = appId;        paramsMap["buyerId"] = buyerId;        paramsMap["orgrationId"] = orgrationId;        paramsMap["shiYouXiao"] = true;        if (!(privaterId in [null,""]))        {            sbf << " and c.productsPrivater.id = :privaterId";            paramsMap["privaterId"] = privaterId;        }        List<Coupon> couponList = new ArrayList();        this.createNativeQuery4Params(sbf.toString(),paramsMap).getResultList()?.each {c->            Coupon coupon = new Coupon();            coupon.id = c[0];            coupon.name = c[1];            coupon.price = c[2] as int;            coupon.moneyValue = c[3] as int;            coupon.salsMinValue = c[4] as int;            coupon.shiYouXiao = c[5];            coupon.shiLoopUse = c[15];            coupon.youXiaoDays = c[6] as int;            coupon.productsPrivater = new ProductsPrivater();            coupon.productsPrivater.id = c[7];            coupon.productsPrivater.name = c[8];            coupon.categoryId = c[9];            coupon.productId = c[10];            coupon.appId = appId;            coupon.remark = c[11];            coupon.canGetCount = c[12] as int;            coupon.createDate = c[13];            coupon.tempMap = [:];            coupon.tempMap["buyerCanGetCount"] = c[14] as int;            if (coupon.tempMap["buyerCanGetCount"] < 0)            {                coupon.tempMap["buyerCanGetCount"] = 0;            }            coupon.tempMap["geted"] = coupon.tempMap["buyerCanGetCount"] < 1;            couponList << coupon;        }        return couponList;    }    List<BuyerCoupon> queryCouponBuyerList8Buyer(String appId,String buyerId,String shiUsedStr,String shiGuoQiStr)    {        List<BuyerCoupon> buyerCouponList = new ArrayList();        StringBuffer sbf = new StringBuffer();        Map<String, Object> paramsMap = new HashMap<String, Object>();        sbf << "select bc.id bc_id,bc.couponid,bc.name bc_name,bc.price bc_price,bc.moneyvalue bc_manyvalue,bc.salsminvalue bc_salsminvalue,bc.begindate,bc.enddate,bc.categoryid bc_categoryid,bc.productid bc_productid,bc.shiused,bc.shiguoqi,pp.name privatername,pp.id privaterid,bc.youxiaodays bc_youxiaodays,bc.remark bc_remark,org.id org_id,org.name org_name,bc.usedate from buyercoupon bc left join productsprivater pp on pp.id = bc.privaterid left join orgration org on org.id = pp.orgrationid where bc.appid = :appId and bc.buyerid = :buyerId";        paramsMap["appId"] = appId;        paramsMap["buyerId"] = buyerId;        if (!(shiUsedStr in [null,""]))        {            sbf << " and bc.shiused = :shiUsed";            paramsMap["shiUsed"] = Boolean.parseBoolean(shiUsedStr);        }        if (!(shiGuoQiStr in [null,""]))        {            sbf << " and bc.shiguoqi = :shiGuoQi";            paramsMap["shiGuoQi"] = Boolean.parseBoolean(shiGuoQiStr);        }        /*        bc.id bc_id,bc.couponid,bc.name bc_name,bc.price bc_price,bc.moneyvalue bc_manyvalue,        bc.salsminvalue bc_salsminvalue,bc.begindate,bc.enddate,bc.categoryid bc_categoryid,bc.productid bc_productid,        bc.shiused,bc.shiguoqi,pp.name privatername,pp.id privaterid,bc.youxiaodays bc_youxiaodays,        bc.remark bc_remark,org.id org_id,org.name org_name,bc.usedate         */        this.createNativeQuery4Params(sbf.toString(),paramsMap).getResultList()?.each {bc->            BuyerCoupon buyerCoupon = new BuyerCoupon();            buyerCoupon.tempMap = [:];            buyerCoupon.couponId = bc[1];            buyerCoupon.id = bc[0];            buyerCoupon.appId = appId;            buyerCoupon.productId = bc[9];            buyerCoupon.categoryId = bc[8];            buyerCoupon.youXiaoDays = bc[14] as int;            buyerCoupon.name = bc[2];            buyerCoupon.price = bc[3] as int;            buyerCoupon.moneyValue = bc[4] as int;            buyerCoupon.salsMinValue = bc[5] as int;            buyerCoupon.buyerId = buyerId;            buyerCoupon.beginDate = bc[6];            buyerCoupon.endDate = bc[7];            buyerCoupon.useDate = bc[18];            buyerCoupon.shiUsed = bc[10] as boolean;            buyerCoupon.shiGuoQi = bc[11] as boolean;            buyerCoupon.privaterId = bc[13];            buyerCoupon.remark = bc[15];            buyerCoupon.tempMap["privaterName"] = bc[12];            buyerCoupon.tempMap["shiXiaoed"] = buyerCoupon.shiUsed || buyerCoupon.shiGuoQi;            buyerCoupon.tempMap["orgId"] = bc[16];            buyerCoupon.tempMap["orgName"] = bc[17];            buyerCouponList << buyerCoupon;        };        return buyerCouponList;    }    @Transactional    void deleteTheCoupon(String couponId)    {        this.executeEQL("delete Coupon where id = :couponId",["couponId":couponId]);    }    @Transactional    void updatebuyerCouponStatus(String buyerCouponId)    {        this.executeEQL("update BuyerCoupon set shiUsed = :shiUsed,useDate = :useDate where id = :id",["id":buyerCouponId,"shiUsed":true,"useDate":new Date()]);    }}