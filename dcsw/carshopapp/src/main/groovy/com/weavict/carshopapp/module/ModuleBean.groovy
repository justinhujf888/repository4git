package com.weavict.carshopapp.moduleimport jakarta.persistence.Query//import jakarta.sql.DataSourceimport org.springframework.transaction.annotation.Transactionalimport com.weavict.common.ejb.BaseBeanclass ModuleBean extends BaseBean{//	@Resource(mappedName="java:jboss/datasources/mysql")//    protected DataSource dataSource;    @Transactional    Object updateTheObject(Object o)    {        return this.updateObject(o);    }    @Transactional    void addTheObject(Object o)    {        this.addObject(o);    }    PageUtil queryRecordsForPager(String sql, String sqlcount, Map<String, Object> paramsMap, int currentPage, int pageSize) throws Exception    {        int firstRecord = currentPage * pageSize;        int totalRecords = paramsMap == null?this.queryTotalRecordsCountByCondition(sqlcount):this.queryTotalRecordsCountByCondition(sqlcount, paramsMap);        int totalPageNumber = totalRecords / pageSize;        if(totalPageNumber * pageSize < totalRecords) {            ++totalPageNumber;        }        List results = this.queryObject(sql, paramsMap, firstRecord, pageSize);        PageUtil pageUtil = new PageUtil(pageSize,currentPage,totalRecords);        pageUtil.content = results;        return pageUtil;    }    PageUtil createNativeQueryLimit(String sql, String sqlcount, int currentPageNu, int pageSize)    {        int firstRecord = currentPageNu * pageSize;        int totalRecords = createNativeQuery(sqlcount).getResultList()[0] as int;        int totalPageNumber = totalRecords / pageSize;        if (totalPageNumber * pageSize < totalRecords)        {            ++totalPageNumber;        }        PageUtil pageUtil = new PageUtil(pageSize,currentPageNu,totalRecords);        pageUtil.content = createNativeQuery("$sql limit ${pageSize} offset ${firstRecord}").getResultList();        return pageUtil;    }    PageUtil createNativeQueryLimit4Params(String sql, String sqlcount,Map<String, Object> paramsMap, int currentPageNu, int pageSize)    {        int firstRecord = currentPageNu * pageSize;        int totalRecords = createNativeQuery4Params(sqlcount,paramsMap).getResultList()[0] as int;        int totalPageNumber = totalRecords / pageSize;        if (totalPageNumber * pageSize < totalRecords)        {            ++totalPageNumber;        }        PageUtil pageUtil = new PageUtil(pageSize,currentPageNu,totalRecords);        pageUtil.content = createNativeQuery4Params("$sql limit ${pageSize} offset ${firstRecord}",paramsMap).getResultList();        return pageUtil;    }    Query createNativeQuery(String sql)    {        this.em.createNativeQuery(sql.replaceAll("<script", ""));    }    Query createNativeQuery4Params(String sql,Map<String, Object> paramsMap)    {        Query query = createNativeQuery(sql);        Iterator iter = paramsMap.keySet().iterator();        while(iter.hasNext()) {            String key = (String)iter.next();            query.setParameter(key, paramsMap.get(key));        }        return query;    }}class PageUtil{    /**     * 每页大小     */    int size;    /**     * 当前页为第几页     */    int number;    /**     * 是否为第一页     */    boolean first = false;    /**     * 是否为最后一页     */    boolean last = false;    /**     * 总共有多少页     */    int totalPages;    /**     * 总共有多少条数据     */    int totalElements;    /**     * 当前页一共有多少条数据     */    int numberOfElements;    /**     * 数据     */    List content = new ArrayList();    /**     * 根据传入的当前多少页     * @param size     * @param number     * @param totalElements     */    PageUtil(int size, int number, int totalElements)    {        this.size = size;        this.totalElements = totalElements;        this.number = number < 0 ? 0 : number;        this.totalPages = totalElements % size == 0 ? totalElements / size : (totalElements / size) + 1;        this.first = number == 0 ? true : false;        this.last = number == this.totalPages-1 ? true : false;    }}